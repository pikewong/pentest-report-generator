using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using NotesAssistant.Findings;
using NotesAssistant.ReportOutput;

namespace NotesAssistant {
    public partial class FormMain : Form {


        public FormMain() {
            InitializeComponent();
            //Program.applicationFindingList = new Dictionary<string, PentestFindings>();
            Program.findingTree = new FindingTree(treeViewFindings);
        }

        private void configUpdate() {
            textBoxProjectTime.Text = Config.ProjectTime;
            textBoxProjectName.Text = Config.ProjectName;
            textBoxDBPath.Text = Config.DatabasePath;
            //TODO
            //textBoxRefDBPath.Text = Config.RefDBPath;
        }

        #region Menu Strip Item
            // New Project
            private void toolStripMenuItemNewProject_Click(object sender, EventArgs e) {
                Program.state.formStartState = State.FormState.CREATE;
                new FormNewProject().ShowDialog();
                if (Program.state.formStartState == State.FormState.DONE) {
                    toolStripMenuItemOpen.Visible = false;
                    toolStripMenuItemNewProject.Visible = false;
                    configUpdate();
                }
            }

            // Open Project
            private void toolStripMenuItemOpen_Click(object sender, EventArgs e) {
                Program.state.formStartState = State.FormState.OPEN;
                new FormOpenProject().ShowDialog();
                if (Program.state.formStartState == State.FormState.DONE) {
                    toolStripMenuItemOpen.Visible = false;
                    toolStripMenuItemNewProject.Visible = false;
                    configUpdate();
                }
            }

            // Save
            private void toolStripMenuItemSave_Click(object sender, EventArgs e) {
                if (Program.Database == null) {
                    MessageBox.Show("No Database Detected. Failed to save...");
                    return;
                }

                Program.Database.saveProject(Program.applicationFindingList);
                MessageBox.Show("Project Saved!");
            }

            // Output as Excel
            private void toolStripMenuItemExcel_Click(object sender, EventArgs e) {
               XlsxOutputFormater excelReport = new XlsxOutputFormater();
                excelReport.insertFindings(Program.applicationFindingList);
            }

            // Close Form
            protected override void OnFormClosing(FormClosingEventArgs e) {
                if (MessageBox.Show("The application will be closed\nConfirm?", "Close Application", MessageBoxButtons.YesNo) == DialogResult.Yes) {
                }
                else {
                    e.Cancel = true;
                    this.Activate();
                }
            }
        #endregion


        #region Summary Tab


            #region Summary Tab : button Click

            ///<summary>
            ///Summary Tab: Button Add is Clicked
            ///Check: Application Name not empty
            ///</summary>
            private void buttonSummaryAdd_Click(object sender, EventArgs e) {
                if (inputSummaryApplicationName.Text.CompareTo(@"Enter Application Name Here...") == 0) {
                    MessageBox.Show(@"Default text detected... Please enter a valid Application Name");
                    return;
                }
                else if (String.IsNullOrEmpty(inputSummaryApplicationName.Text)) {
                    MessageBox.Show(@"Application Name could not be empty");
                    return;
                }

                addNewApplication();
            }

            ///<summary>
            ///Summary Tab: Button Delete is Clicked
            ///Check: Application Name not empty
            ///</summary>
            private void buttonSummaryDel_Click(object sender, EventArgs e) {
                if (inputSummaryApplicationName.Text.CompareTo(@"Enter Application Name Here...") == 0) {
                    MessageBox.Show(@"Default text detected... Please enter a valid Application Name");
                    return;
                }
                else if (String.IsNullOrEmpty(inputSummaryApplicationName.Text)) {
                    MessageBox.Show(@"Application Name could not be empty");
                    return;
                }
                deleteApplication();


            }

            #endregion

            #region Summary Tab : Function

            ///<summary>
            ///Call by Summary Tab Add Button
            ///Check: Application Name unique and add
            ///Update: 
            ///ApplicationList
            ///Summary: ComboBox
            ///Notes: TreeView, Application Name
            ///</summary>
            private void addNewApplication() {
                string applicationName = inputSummaryApplicationName.Text;
                if (Program.applicationFindingList.Keys.Contains(applicationName)) {
                    MessageBox.Show("Application : " + applicationName + " already exist");
                    return;
                }
                manageApplicationName("ADD", applicationName);
                MessageBox.Show(@"Added Application: " + applicationName);

            }

            ///<summary>
            ///Call by Summary Tab Delete Button
            ///Check: Application Name exist and remove
            ///Update: 
            ///ApplicationList
            ///Summary: ComboBox
            ///Notes: TreeView, Application Name
            ///</summary>
            private void deleteApplication() {
                string applicationName = inputSummaryApplicationName.Text;

                if (!inputApplicationName.Items.Contains(applicationName)) {
                    MessageBox.Show("Application : " + applicationName + " does not exist");
                    return;
                }
                manageApplicationName("REMOVE", applicationName);
                MessageBox.Show(@"Deleted Application : " + applicationName);

            }

            // Public because database need to access this
            public void manageApplicationName(string ACTION, string applicationName) {
                switch (ACTION) { 
                    case "ADD":
                        PentestFindings pentestFindings = new PentestFindings();

                        // Create New Application
                        Program.applicationFindingList.Add(applicationName, pentestFindings);

                        // Update Summary Stat, Name Box
                        inputSummaryApplicationName.Items.Add(applicationName);

                        // Update Finding Tree, Notes Name Box
                        Program.findingTree.addApplication(applicationName);
                        inputApplicationName.Items.Add(applicationName);
                        break;
                    case"REMOVE":
                        // Update Finding Tree, Notes Name Box
                        Program.findingTree.removeApplication(applicationName);
                        inputApplicationName.Items.Remove(applicationName);

                        // Update Summary Stat, Name Box
                        inputSummaryApplicationName.Items.Remove(applicationName);

                        // Delete Application
                        Program.applicationFindingList.Remove(applicationName);
                        break;

                }
            }
            #endregion

        #endregion

        #region Notes Tab
            #region Notes Tab : button Click
                ///<summary>
                ///Notes Tab: Button Add is Clicked
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private void buttonFindingAdd_Click(object sender, EventArgs e) {
                    if (!inputCheckPass()) return;
                    addNewFindings();
                }

                ///<summary>
                ///Notes Tab: Button Delete is Clicked
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private void buttonFindingDel_Click(object sender, EventArgs e) {
                    if (!inputCheckPass()) return;
                    
                    if (MessageBox.Show("Remove Findings\n[ "+inputApplicationName.Text + " ] : " + inputFindingName.Text + "\nConfirm?", @"Remove Findings", MessageBoxButtons.YesNo) == DialogResult.Yes) {
                        deleteFindings();
                    }
                    else {
                        return;
                    }
                }

                ///<summary>
                ///Notes Tab: Button Update is Clicked
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private void buttonFindingUpdate_Click(object sender, EventArgs e) {
                    if (!inputCheckPass()) return;
                    if (!Program.findingTree.isFindingSelected()) return;
                    updateFinding();
                }

            #endregion

            #region Notes Tab : Function
                ///<summary>
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private bool inputCheckPass() {
                    // Check if Details tab is selected
                    if (tabControlFindingDetails.SelectedTab != tabControlFindingDetails.TabPages["tabPageDetails"]) {
                        return false;
                    }

                    // Check if applicaton Name selected
                    if (String.IsNullOrEmpty(inputApplicationName.Text)) {
                        MessageBox.Show(@"Please select an application");
                        return false;
                    }

                    // Name cannot be null
                    if (String.IsNullOrEmpty(inputFindingName.Text)) {
                        MessageBox.Show(@"Finding Name cannot be Empty");
                        return false;
                    }
                    return true;
                }

                ///<summary>
                ///Call by Notes Tab Add Button
                ///Check: Findins unique and add
                ///Update: 
                ///Notes: TreeView
                ///</summary>
                private void addNewFindings() {
                    string applicationName = inputApplicationName.Text;
                    PentestFindings pentestFindings = Program.applicationFindingList[applicationName];

                    DataEntry entry = new DataEntry();
                    saveInputToEntry(entry);

                    // Entry must be unique
                    if (pentestFindings.isRecordExist(entry.getFindingName())) {
                        MessageBox.Show("Finding Name Already Exist");
                        return;
                    }

                    pentestFindings.addEntry(entry);
                    Program.findingTree.insertFinding(entry.getApplicationName(), entry.getFindingName(), entry.getRiskLevel());
                    //TODO Update stat?

                    MessageBox.Show("Added Finding\n" + inputFindingName.Text);
                }
                
                ///<summary>
                ///Call by Notes Tab Delete Button
                ///Check: Findins exist and delete
                ///Update: 
                ///PentestFindings
                ///Notes: TreeView
                ///</summary>
                private void deleteFindings() { 
                    // TODO may need to check db
                    string applicationName = inputApplicationName.Text;
                    PentestFindings pentestFindings = Program.applicationFindingList[applicationName];
                    DataEntry entry = pentestFindings.getEntryByFindingName(inputFindingName.Text);
                    if (entry == null) {
                        MessageBox.Show(@"Finding does not exist");
                        return;
                    }
                    
                    Program.findingTree.removeFinding(entry.getApplicationName(), entry.getFindingName(), entry.getRiskLevel());

                    pentestFindings.removeEntry(entry);
                    MessageBox.Show(@"Finding Deleted");
                }

                ///<summary>
                ///Call by Notes Tab Update Button
                ///Check: Update Selected TreeNode (Need to be an Item)
                ///Update: 
                ///PentestFindings
                ///Notes: TreeView
                ///</summary>
                private void updateFinding() {
                    // Get Information of Orignial Selected Node
                    string selectedApplicationName = Program.findingTree.getSelectedRootNodeName();
                    string selectedFindingName = Program.findingTree.getSelectedFindingName();
                    RiskLevel selectedRiskLevel = Program.findingTree.getSelecetedFindingRisk();
                    PentestFindings pentestFinding = Program.applicationFindingList[selectedApplicationName];
                    DataEntry entry = pentestFinding.getEntryByFindingName(selectedFindingName);

                    //Same Application Update
                    if (selectedApplicationName.CompareTo(inputApplicationName.Text) == 0) {
                        // IF findingname unchange or new findingname does not exist
                        if (selectedFindingName.CompareTo(inputFindingName.Text) != 0 && pentestFinding.isRecordExist(inputFindingName.Text)) {
                            MessageBox.Show("Record already exist in \n[ " + selectedApplicationName + " ] : " + inputFindingName.Text);
                            return;
                        }

                        saveInputToEntry(entry);

                        Program.findingTree.removeFinding(selectedApplicationName, selectedFindingName, selectedRiskLevel);
                        Program.findingTree.insertFinding(entry.getApplicationName(), entry.getFindingName(), entry.getRiskLevel());
                        MessageBox.Show("Updated Finding\n" + entry.getFindingName());
                    }
                    else {

                        if (MessageBox.Show("Update Finding From\n[ " + selectedApplicationName + " ] : " + selectedFindingName + "\nto\n[ " + inputApplicationName.Text + " ] : " + inputFindingName.Text + "\nConfirm?", @"Update Finding", MessageBoxButtons.YesNo) == DialogResult.Yes) {
                            PentestFindings newPentestFinding = Program.applicationFindingList[inputApplicationName.Text];
                            if (newPentestFinding.isRecordExist(inputFindingName.Text)) {
                                MessageBox.Show(@"Duplicated Findings in [ " + inputApplicationName.Text + " ] : " + inputFindingName.Text);
                                return;
                            }
                            DataEntry newEntry = new DataEntry();
                            saveInputToEntry(newEntry);
                            Program.findingTree.removeFinding(selectedApplicationName, selectedFindingName, selectedRiskLevel);
                            pentestFinding.removeEntry(entry);
                            newPentestFinding.addEntry(newEntry);
                            Program.findingTree.insertFinding(newEntry.getApplicationName(), newEntry.getFindingName(), newEntry.getRiskLevel());
                            MessageBox.Show("Updated Finding From\n[ " + selectedApplicationName + " ]\nto\n[ " + newEntry.getApplicationName() + " ] : " + entry.getFindingName());
                        }
                        else {
                            return;
                        }

                    }
                    
                }

                ///<summary>
                ///saveInputToEntry
                ///</summary>
                private void saveInputToEntry(DataEntry entry) {
                    string applicationName = inputApplicationName.Text;
                    string findingName = inputFindingName.Text;
                    string generalName = inputGeneralName.Text;
                    RiskLevel riskLevel = RiskLevelFunction.getLevel(inputRiskLevel.Text);
                    OWASP owasp = OWASPFunction.getOWASP(inputOWASP.Text);
                    string affected = inputAffected.Text;
                    string details = inputDetails.Text;
                    string recommendation = inputRecommendation.Text;
                    string notes = inputNotes.Text;

                    if (String.IsNullOrEmpty(findingName)) {
                        MessageBox.Show("Finding name could not be empty!!");
                        return;
                    }
                    entry.setApplicationName(applicationName);
                    entry.setFindingName(findingName);
                    entry.setGeneralName(generalName);
                    entry.setOWASP(owasp);
                    entry.setRiskLevel(riskLevel);
                    entry.setAffected(affected);
                    entry.setDetails(details);
                    entry.setRecommendation(recommendation);
                    entry.setNotes(notes);
                    //TODO Screenshot
                }
            
            #endregion

            #region Notes Tab : Tree View
                ///<summary>
                ///Finding Name Selected
                ///</summary>
                private void treeViewFindings_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e) {
                    TreeNode selectedNode = treeViewFindings.SelectedNode;
                    Program.findingTree.setSelectedNode(selectedNode);

                    string selectedApplicaitonName = Program.findingTree.getSelectedRootNodeName();

                    string selectedFindingName = selectedNode.Text;
                    displayEntry(selectedApplicaitonName, selectedFindingName);
                }

                ///<summary>
                ///Get finding by name and display
                ///</summary>
                private void displayEntry(string applicationName, string findingName) {
                    PentestFindings pentestFinding = Program.applicationFindingList[applicationName];
                    DataEntry entry = pentestFinding.getEntryByFindingName(findingName);
            
                    if (entry == null) {
                        //Debug
                        statusLabel.Text = "Debug: Clicked on an non exsisting record!!";
                        return;
                    } statusLabel.Text = "";


                    inputApplicationName.Text = entry.getApplicationName();
                    inputFindingName.Text = entry.getFindingName();
                    inputGeneralName.Text = entry.getGeneralName();
                    inputOWASP.Text = entry.getOWASPString();
                    inputRiskLevel.Text= entry.getRiskLevel().ToString();
                    inputAffected.Text = entry.getAffected();
                    inputDetails.Text = entry.getDetails();
                    inputRecommendation.Text = entry.getRecommendation();
                    inputNotes.Text = entry.getNotes();
                    //TODO Screenshot
                }
            #endregion





        #endregion

        #region Output Tab



        #endregion

                public void updateConfig() {
                    textBoxProjectTime.Text = Config.ProjectTime;
                    textBoxProjectName.Text = Config.ProjectName;
                    textBoxDBPath.Text = Config.DatabasePath;
                    textBoxRefDBPath.Text = Config.RefDBPath;
                }

                private void buttonRefLoad_Click(object sender, EventArgs e) {
                    if (Program.Database == null) {
                        MessageBox.Show("No Database Detected. Failed to save...");
                        return;
                    }
                    Config.RefDBPath = textBoxRefDBPath.Text;
                    Program.Database.LoadReference();
                    MessageBox.Show("Reference Loaded");
                }

        public void updateReference(string area, string item){
            switch (area) { 
                case("ProjectName"):
                    inputRefProjectName.Items.Add(item);
                    break;
                case("FindingName"):
                    inputRefFindingName.Items.Add(item);
                    break;
                case("GeneralName"):
                    inputRefGeneralName.Items.Add(item);
                    break;
            }
        }

        private void buttonRefClearSelection_Click(object sender, EventArgs e) {

            clearRefProjectName();
            clearRefFindingName();
            clearRefGeneralName();            
            Program.Database.LoadReference();
        }

        public void clearRefProjectName() {
            inputRefProjectName.Items.Clear();
            inputRefProjectName.Enabled = true;
        }

        public void clearRefFindingName() {
            inputRefFindingName.Items.Clear();
            inputRefFindingName.Text = "";
            inputRefFindingName.Enabled = true;
        }

        public void clearRefGeneralName() {
            inputRefGeneralName.Items.Clear();
            inputRefGeneralName.Text = "";
            inputGeneralName.Enabled = true;
        }

        private void inputRefProjectName_SelectedIndexChanged(object sender, EventArgs e) {
            inputRefProjectName.Enabled = false;
            Dictionary<string, string> referenceInput = new Dictionary<string, string>();
            referenceInput.Add("ProjectName", inputRefProjectName.Text);
            referenceInput.Add("FindingName", inputRefFindingName.Text);
            referenceInput.Add("GeneralName", inputRefGeneralName.Text);

            Program.Database.updateReferenceItem(referenceInput);
        }

        private void inputRefFindingName_SelectedIndexChanged(object sender, EventArgs e) {
            inputRefFindingName.Enabled = false;
        }

        private void inputRefGeneralName_SelectedIndexChanged(object sender, EventArgs e) {
            inputRefGeneralName.Enabled = false;
        }




    }
}