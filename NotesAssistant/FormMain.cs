using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using NotesAssistant.Findings;
using NotesAssistant.ReportOutput;
using System.Diagnostics;

namespace NotesAssistant {
    public partial class FormMain : Form {


        public FormMain() {
            InitializeComponent();
            Program.findingTree = new FindingTree(treeViewFindings, dataGridViewSummary);
            Program.reportTree = new FindingTree(treeViewReport, null);
        }

        private void configUpdate() {
            textBoxProjectTime.Text = Config.ProjectTime;
            textBoxProjectName.Text = Config.ProjectName;
            textBoxDBPath.Text = Config.DatabasePath;
            //TODO
            //textBoxRefDBPath.Text = Config.RefDBPath;
        }

        #region Menu Strip Item
            /// <summary>
            /// Create Project
            /// </summary>
            /// <param name="sender"></param>
            /// <param name="e"></param>
            private void toolStripMenuItemNewProject_Click(object sender, EventArgs e) {
                Program.state.formStartState = State.FormState.CREATE;
                new FormNewProject().ShowDialog();
                if (Program.state.formStartState == State.FormState.DONE) {
                    toolStripMenuItemOpen.Visible = false;
                    toolStripMenuItemNewProject.Visible = false;
                    configUpdate();
                }
            }

            /// <summary>
            /// Open Project
            /// </summary>
            /// <param name="sender"></param>
            /// <param name="e"></param>
            private void toolStripMenuItemOpen_Click(object sender, EventArgs e) {
                Program.state.formStartState = State.FormState.OPEN;
                new FormOpenProject().ShowDialog();
                if (Program.state.formStartState == State.FormState.DONE) {
                    toolStripMenuItemOpen.Visible = false;
                    toolStripMenuItemNewProject.Visible = false;
                    configUpdate();
                }
            }

            /// <summary>
            /// Save DataEntries to DB
            /// </summary>
            /// <param name="sender"></param>
            /// <param name="e"></param>
            private void toolStripMenuItemSave_Click(object sender, EventArgs e) {
                if (Program.Database == null) {
                    MessageBox.Show("No Database Detected. Failed to save...");
                    return;
                }

                Program.Database.saveProject(Program.projectFinding);
                MessageBox.Show("Project Saved!");
            }

            /// <summary>
            /// Output Excel report
            /// </summary>
            /// <param name="sender"></param>
            /// <param name="e"></param>
            private void toolStripMenuItemExcel_Click(object sender, EventArgs e) {
               XlsxOutputFormater excelReport = new XlsxOutputFormater();
                excelReport.insertFindings(Program.projectFinding);
            }

            /// <summary>
            /// Output Word Report
            /// </summary>
            /// <param name="sender"></param>
            /// <param name="e"></param>
            private void toolStripMenuItemWord_Click(object sender, EventArgs e) {
                docxOutputFormater doc = new docxOutputFormater(Program.projectFinding);
            }

            // Close Form
            protected override void OnFormClosing(FormClosingEventArgs e) {
                if (MessageBox.Show("The application will be closed\nConfirm?", "Close Application", MessageBoxButtons.YesNo) == DialogResult.Yes) {
                }
                else {
                    e.Cancel = true;
                    this.Activate();
                }
            }
        #endregion


        #region Summary Tab


            #region Summary Tab : button Click

            ///<summary>
            ///Summary Tab: Button Add is Clicked
            ///Check: Application Name not empty
            ///addNewApplication()
            ///</summary>
            private void buttonSummaryAdd_Click(object sender, EventArgs e) {
                if (inputSummaryApplicationName.Text.CompareTo(@"Enter Application Name Here...") == 0) {
                    MessageBox.Show(@"Default text detected... Please enter a valid Application Name");
                    return;
                }
                else if (String.IsNullOrEmpty(inputSummaryApplicationName.Text)) {
                    MessageBox.Show(@"Application Name could not be empty");
                    return;
                }

                addNewApplication();
            }

            ///<summary>
            ///Summary Tab: Button Delete is Clicked
            ///Check: Application Name not empty
            ///deleteApplication()
            ///</summary>
            private void buttonSummaryDel_Click(object sender, EventArgs e) {
                if (inputSummaryApplicationName.Text.CompareTo(@"Enter Application Name Here...") == 0) {
                    MessageBox.Show(@"Default text detected... Please enter a valid Application Name");
                    return;
                }
                else if (String.IsNullOrEmpty(inputSummaryApplicationName.Text)) {
                    MessageBox.Show(@"Application Name could not be empty");
                    return;
                }
                deleteApplication();


            }

            #endregion

            #region Summary Tab : Function

            ///<summary>
            ///Call by Summary Tab Add Button
            ///Check: Application Name unique and add
            ///Update: 
            ///ApplicationList
            ///Summary: ComboBox
            ///Notes: TreeView, Application Name
            ///</summary>
            private void addNewApplication() {
                string applicationName = inputSummaryApplicationName.Text;
                if (Program.projectFinding.isApplicationExist(applicationName)) {
                    MessageBox.Show("Application : " + applicationName + " already exist");
                    return;
                }
                manageApplicationName("ADD", applicationName);
                MessageBox.Show(@"Added Application: " + applicationName);

            }

            ///<summary>
            ///Call by Summary Tab Delete Button
            ///Check: Application Name exist and remove
            ///Update: 
            ///ApplicationList
            ///Summary: ComboBox
            ///Notes: TreeView, Application Name
            ///</summary>
            private void deleteApplication() {
                string applicationName = inputSummaryApplicationName.Text;

                if (!inputApplicationName.Items.Contains(applicationName)) {
                    MessageBox.Show("Application : " + applicationName + " does not exist");
                    return;
                }
                manageApplicationName("REMOVE", applicationName);
                MessageBox.Show(@"Deleted Application : " + applicationName);

            }

            // Public because database need to access this
            public void manageApplicationName(string ACTION, string applicationName) {
                switch (ACTION) { 
                    case "ADD":

                        // Create New Application
                        Program.projectFinding.addApplication(applicationName);

                        // Update Summary Application List
                        inputSummaryApplicationName.Items.Add(applicationName);

                        // Update Tree Field Application List
                        Program.findingTree.addApplication(applicationName);

                        // Update Data Field Application List
                        inputApplicationName.Items.Add(applicationName);
                        break;
                    case"REMOVE":
                        // Update Finding Tree, Notes Name Box
                        Program.findingTree.removeApplication(applicationName);
                        inputApplicationName.Items.Remove(applicationName);

                        // Update Summary Stat, Name Box
                        inputSummaryApplicationName.Items.Remove(applicationName);

                        // Delete Application
                        Program.projectFinding.removeApplication(applicationName);
                        break;

                }
            }
            #endregion

        #endregion

        #region Notes Tab
            #region Notes Tab : button Click
                ///<summary>
                ///Notes Tab: Button Add is Clicked
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private void buttonFindingAdd_Click(object sender, EventArgs e) {
                    if (!inputCheckPass()) return;
                    addNewFindings();
                }

                ///<summary>
                ///Notes Tab: Button Delete is Clicked
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private void buttonFindingDel_Click(object sender, EventArgs e) {
                    if (!inputCheckPass()) return;
                    
                    if (MessageBox.Show("Remove Findings\n[ "+inputApplicationName.Text + " ] : " + inputFindingName.Text + "\nConfirm?", @"Remove Findings", MessageBoxButtons.YesNo) == DialogResult.Yes) {
                        deleteFindings();
                    }
                    else {
                        return;
                    }
                }

                ///<summary>
                ///Notes Tab: Button Update is Clicked
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private void buttonFindingUpdate_Click(object sender, EventArgs e) {
                    if (!inputCheckPass()) return;
                    if (!Program.findingTree.isFindingSelected()) return;
                    updateFinding();
                }

            #endregion

            #region Notes Tab : Function
                ///<summary>
                ///Check: Application Name, Finding Name not empty
                ///</summary>
                private bool inputCheckPass() {
                    // Check if Details tab is selected
                    if (tabControlFindingDetails.SelectedTab != tabControlFindingDetails.TabPages["tabPageDetails"]) {
                        return false;
                    }

                    // Check if applicaton Name selected
                    if (String.IsNullOrEmpty(inputApplicationName.Text)) {
                        MessageBox.Show(@"Please select an application");
                        return false;
                    }

                    // Name cannot be null
                    if (String.IsNullOrEmpty(inputFindingName.Text)) {
                        MessageBox.Show(@"Finding Name cannot be Empty");
                        return false;
                    }
                    return true;
                }

                ///<summary>
                ///Call by Notes Tab Add Button
                ///Check: Findins unique and add
                ///Update: 
                ///Notes: TreeView
                ///</summary>
                private void addNewFindings() {
                    string applicationName = inputApplicationName.Text;

                    DataEntry entry = new DataEntry();
                    copyInputToEntry(entry);

                    // Entry must be unique
                    if (Program.projectFinding.getEntry(applicationName, entry.getFindingName())!=null) {
                        MessageBox.Show("Finding Name Already Exist");
                        return;
                    }

                    Program.projectFinding.addEntry(applicationName,entry);
                    Program.findingTree.insertFinding(entry.getApplicationName(), entry.getFindingName(), entry.getRiskLevel());
                    //TODO Update stat?

                    MessageBox.Show("Added Finding\n" + inputFindingName.Text);
                }
                
                ///<summary>
                ///Call by Notes Tab Delete Button
                ///Check: Findins exist and delete
                ///Update: 
                ///PentestFindings
                ///Notes: TreeView
                ///</summary>
                private void deleteFindings() { 
                    // TODO may need to check db
                    string applicationName = inputApplicationName.Text;
                    DataEntry entry = Program.projectFinding.getEntry(applicationName, inputFindingName.Text);
                    if (entry == null) {
                        MessageBox.Show(@"Finding does not exist");
                        return;
                    }
                    
                    Program.findingTree.removeFinding(entry.getApplicationName(), entry.getFindingName(), entry.getRiskLevel());

                    Program.projectFinding.removeEntry(applicationName, entry);
                    MessageBox.Show(@"Finding Deleted");
                }

                ///<summary>
                ///Call by Notes Tab Update Button
                ///Check: Update Selected TreeNode (Need to be an Item)
                ///Update: 
                ///PentestFindings
                ///Notes: TreeView
                ///</summary>
                private void updateFinding() {
                    // Get Information of Orignial Selected Node
                    string selectedApplicationName = Program.findingTree.getSelectedRootNodeName();
                    string selectedFindingName = Program.findingTree.getSelectedFindingName();
                    RiskLevel selectedRiskLevel = Program.findingTree.getSelecetedFindingRisk();
                    DataEntry entry = Program.projectFinding.getEntry(selectedApplicationName, selectedFindingName);

                    //Same Application Update
                    if (selectedApplicationName.CompareTo(inputApplicationName.Text) == 0) {
                        // Reject if finding name changed and new name already exist
                        if (selectedFindingName.CompareTo(inputFindingName.Text) != 0 && Program.projectFinding.getEntry(inputApplicationName.Text, inputFindingName.Text)!=null) {
                            MessageBox.Show("Record already exist in \n[ " + selectedApplicationName + " ] : " + inputFindingName.Text);
                            return;
                        }

                        DataEntry newEntry = new DataEntry();
                        newEntry.deepCopy(entry);

                        // Only update general information
                        newEntry.setFindingName(inputFindingName.Text);
                        newEntry.setGeneralName(inputGeneralName.Text);
                        newEntry.setOWASP(OWASPFunction.getOWASP(inputOWASP.Text));
                        newEntry.setRiskLevel(RiskLevelFunction.getLevel(inputRiskLevel.Text));

                        Program.findingTree.removeFinding(selectedApplicationName, selectedFindingName, selectedRiskLevel);
                        Program.projectFinding.removeEntry(selectedApplicationName, entry);
                        Program.projectFinding.addEntry(selectedApplicationName, newEntry);
                        Program.findingTree.insertFinding(newEntry.getApplicationName(), newEntry.getFindingName(), newEntry.getRiskLevel());
                        MessageBox.Show("Updated Finding\n" + entry.getFindingName());
                    }
                        // Move across application
                    else {

                        if (MessageBox.Show("Update Finding From\n[ " + selectedApplicationName + " ] : " + selectedFindingName + "\nto\n[ " + inputApplicationName.Text + " ] : " + inputFindingName.Text + "\nConfirm?", @"Update Finding", MessageBoxButtons.YesNo) == DialogResult.Yes) {
                            // Reject if finding already exist
                            if (Program.projectFinding.getEntry(inputApplicationName.Text, inputFindingName.Text) != null) {
                                MessageBox.Show(@"Duplicated Findings in [ " + inputApplicationName.Text + " ] : " + inputFindingName.Text);
                                return;
                            }
                            DataEntry newEntry = new DataEntry();
                            newEntry.deepCopy(entry);
                            newEntry.setApplicationName(inputApplicationName.Text);
                            newEntry.setFindingName(inputFindingName.Text);
                            newEntry.setGeneralName(inputGeneralName.Text);
                            newEntry.setOWASP(OWASPFunction.getOWASP(inputOWASP.Text));
                            newEntry.setRiskLevel(RiskLevelFunction.getLevel(inputRiskLevel.Text));

                            Program.findingTree.removeFinding(selectedApplicationName, selectedFindingName, selectedRiskLevel);
                            Program.projectFinding.addEntry(inputApplicationName.Text, newEntry);
                            Program.projectFinding.removeEntry(selectedApplicationName, entry);
                            Program.findingTree.insertFinding(newEntry.getApplicationName(), newEntry.getFindingName(), newEntry.getRiskLevel());
                            MessageBox.Show("Updated Finding From\n[ " + selectedApplicationName + " ]\nto\n[ " + newEntry.getApplicationName() + " ] : " + entry.getFindingName());
                        }
                        else {
                            return;
                        }

                    }
                    
                }

                ///<summary>
                ///Copy input to entry, except screenshot
                ///</summary>
                private void copyInputToEntry(DataEntry entry) {
                    string applicationName = inputApplicationName.Text;
                    string findingName = inputFindingName.Text;
                    string generalName = inputGeneralName.Text;
                    RiskLevel riskLevel = RiskLevelFunction.getLevel(inputRiskLevel.Text);
                    OWASP owasp = OWASPFunction.getOWASP(inputOWASP.Text);
                    string affected = inputAffected.Text;
                    string details = inputDetails.Text;
                    string recommendation = inputRecommendation.Text;
                    string notes = inputNotes.Text;

                    if (String.IsNullOrEmpty(findingName)) {
                        MessageBox.Show("Finding name could not be empty!!");
                        return;
                    }
                    entry.setApplicationName(applicationName);
                    entry.setFindingName(findingName);
                    entry.setGeneralName(generalName);
                    entry.setOWASP(owasp);
                    entry.setRiskLevel(riskLevel);
                    entry.setAffected(affected);
                    entry.setDetails(details);
                    entry.setRecommendation(recommendation);
                    entry.setNotes(notes);
                }
            
            #endregion

            #region Notes Tab : Tree View
                ///<summary>
                ///Finding Name Selected
                ///</summary>
                private void treeViewFindings_NodeMouseDoubleClick(object sender, TreeNodeMouseClickEventArgs e) {
                    TreeNode selectedNode = treeViewFindings.SelectedNode;
                    if (selectedNode == null) return;
                    Program.findingTree.setSelectedNode(selectedNode);

                    string selectedApplicaitonName = Program.findingTree.getSelectedRootNodeName();

                    string selectedFindingName = selectedNode.Text;
                    displayEntry(selectedApplicaitonName, selectedFindingName);
                }

                ///<summary>
                ///Get finding by name and display
                ///</summary>
                private void displayEntry(string applicationName, string findingName) {
                    DataEntry entry = Program.projectFinding.getEntry(applicationName, findingName);
            
                    if (entry == null) {
                        //Debug
                        statusLabel.Text = "Debug: Clicked on an non exsisting record!!";
                        return;
                    } statusLabel.Text = "";


                    inputApplicationName.Text = entry.getApplicationName();
                    inputFindingName.Text = entry.getFindingName();
                    inputGeneralName.Text = entry.getGeneralName();
                    inputOWASP.Text = entry.getOWASPString();
                    inputRiskLevel.Text= entry.getRiskLevel().ToString();
                    inputAffected.Text = entry.getAffected();
                    inputDetails.Text = entry.getDetails();
                    inputRecommendation.Text = entry.getRecommendation();
                    inputNotes.Text = entry.getNotes();
                    // Load Screenshot
                    inputPoC.Items.Clear();
                    pictureBoxPoC.Image = null;
                    inputCaption.Text = "";
                    foreach (string name in entry.getScreenshots().Keys) {
                        inputPoC.Items.Add(name);
                    }

                }
            #endregion





        #endregion

        #region Output Tab



        #endregion

                public void updateConfig() {
                    textBoxProjectTime.Text = Config.ProjectTime;
                    textBoxProjectName.Text = Config.ProjectName;
                    textBoxDBPath.Text = Config.DatabasePath;
                    textBoxRefDBPath.Text = Config.RefDBPath;
                }

                private void buttonRefLoad_Click(object sender, EventArgs e) {
                    if (Program.Database == null) {
                        MessageBox.Show("No Database Detected. Failed to save...");
                        return;
                    }
                    Config.RefDBPath = textBoxRefDBPath.Text;
                    Program.Database.LoadReference();
                    MessageBox.Show("Reference Loaded");
                }

        public void updateReference(string area, string item){
            switch (area) { 
                case("ProjectName"):
                    inputRefProjectName.Items.Add(item);
                    break;
                case("FindingName"):
                    inputRefFindingName.Items.Add(item);
                    break;
                case("GeneralName"):
                    inputRefGeneralName.Items.Add(item);
                    break;
            }
        }

        public void clearRefProjectName() {
            inputRefProjectName.Items.Clear();
            inputRefProjectName.Enabled = true;
        }

        public void clearRefFindingName() {
            inputRefFindingName.Items.Clear();
            inputRefFindingName.Text = "";
            inputRefFindingName.Enabled = true;
        }

        public void clearRefGeneralName() {
            inputRefGeneralName.Items.Clear();
            inputRefGeneralName.Text = "";
            inputGeneralName.Enabled = true;
        }

        private void inputRefProjectName_SelectedIndexChanged(object sender, EventArgs e) {
            inputRefProjectName.Enabled = false;
            passInfoToDB();
        }

        private void inputRefFindingName_SelectedIndexChanged(object sender, EventArgs e) {
            inputRefFindingName.Enabled = false;
            passInfoToDB();
        }

        private void inputRefGeneralName_SelectedIndexChanged(object sender, EventArgs e) {
            inputRefGeneralName.Enabled = false;
            passInfoToDB();
        }

        private void buttonClearRefProjectName_Click(object sender, EventArgs e) {
            inputRefProjectName.Enabled = true;
            clearRefProjectName();
            passInfoToDB();
        }

        private void buttonClearRefFindingName_Click(object sender, EventArgs e) {
            inputRefFindingName.Enabled = true;
            clearRefFindingName();
            passInfoToDB();
        }

        private void buttonClearRefGeneralName_Click(object sender, EventArgs e) {
            inputRefGeneralName.Enabled = true;
            clearRefGeneralName();
            passInfoToDB();
        }

        private void passInfoToDB() {
            Dictionary<string, string> referenceInput = new Dictionary<string, string>();
            referenceInput.Add("ProjectName", inputRefProjectName.Text);
            referenceInput.Add("FindingName", inputRefFindingName.Text);
            referenceInput.Add("GeneralName", inputRefGeneralName.Text);
            Program.Database.updateReferenceItem(referenceInput);
        }

        public void displayRef(string ProjectName, string FindingName, string GeneralName, string OWASP, string RiskLevel, string Affected, string Details, string Recommendation, string Notes) {
            inputRefProjectName.Text = ProjectName;
            inputRefFindingName.Text = FindingName;
            inputRefGeneralName.Text = GeneralName;
            inputRefOWASP.Text = OWASP;
            inputRefRiskLevel.Text = RiskLevel;
            inputRefAffected.Text = Affected;
            inputRefDetails.Text = Details;
            inputRefReommendation.Text = Recommendation;
            inputRefNotes.Text = Notes;
                    
        }

        private void buttonRefUnlock_Click(object sender, EventArgs e) {
            if (inputRefAffected.Enabled == false) {
                inputRefAffected.Enabled = true;
                inputRefDetails.Enabled = true;
                inputRefReommendation.Enabled = true;
                inputRefNotes.Enabled = true;
            }else{
                inputRefAffected.Enabled = false;
                inputRefDetails.Enabled = false;
                inputRefReommendation.Enabled = false;
                inputRefNotes.Enabled = false;
            }
        }

        private void buttonRefCopyGeneral_Click(object sender, EventArgs e) {
            inputFindingName.Text = inputRefFindingName.Text;
            inputGeneralName.Text = inputRefGeneralName.Text;
            inputOWASP.Text = inputRefOWASP.Text;
            inputRiskLevel.Text = inputRefRiskLevel.Text;
            MessageBox.Show("Copied:\nFinding Name\nGeneral Name\nOWASP\nRisk Level");
        }

        private void buttonRefCopyDetails_Click(object sender, EventArgs e) {
            inputDetails.Text = inputRefDetails.Text;
            MessageBox.Show("Copied:\nDetails");
        }

        private void buttonRefCopyRecommendation_Click(object sender, EventArgs e) {
            inputRecommendation.Text = inputRefReommendation.Text;
            MessageBox.Show("Copied:\nRecommendation");
        }



        /// <summary>
        /// Add Screenshot button
        /// A finding needs to be created first
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonPoCAdd_Click(object sender, EventArgs e) {
            if (!Program.findingTree.isFindingSelected()) {
                MessageBox.Show(@"Finding needs to be created first before inserting screenshots");
                return;
            }

            // Open the screenshot
            OpenFileDialog ofd = new OpenFileDialog();
            string fullFilePath = null;
            ofd.Title = "Please select the screenshot";
            ofd.Filter = "Image (*.jpg;*.jpeg;*.png;)|*.jpg;*.jpeg;*.png;";
            if (ofd.ShowDialog() == DialogResult.OK) {
                try {
                    Stream fileStream = ofd.OpenFile();
                    if (fileStream != null) {
                        fullFilePath = ofd.FileName;
                        // Check if path existed and add screenshot to dropdown list
                        if (Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName()).isScreenshotExist(Path.GetFileNameWithoutExtension(fullFilePath))) {
                            MessageBox.Show("Screenshot already exist:\n" + fullFilePath);
                            return;
                        }
                        Image photo = new Bitmap(fullFilePath);
                        pictureBoxPoC.Image = photo;
                        fileStream.Close();
                    }
                }
                catch (Exception ex) {
                    MessageBox.Show("Error: Could not read file from disk. Original error: " + ex.Message);
                }

                ofd.Dispose();


                DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
                Screenshot screenshot = new Screenshot(pictureBoxPoC.Image, "");

                //entry.addScreenshot(Path.GetFileNameWithoutExtension(fullFilePath), screenshot);
                //inputPoC.Items.Add(Path.GetFileNameWithoutExtension(fullFilePath));
                int count = inputPoC.Items.Count;
                entry.addScreenshot("Image_" + count.ToString(), screenshot);
                inputPoC.Items.Add("Image_" + count.ToString());
                inputPoC.SelectedIndex = inputPoC.Items.Count - 1;
                inputCaption.Text = "";

            }
        }

        /// <summary>
        /// Del Screenshot button
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void buttonPoCDel_Click(object sender, EventArgs e) {
            if (!Program.findingTree.isFindingSelected()) {
                MessageBox.Show(@"No finding selected");
                return;
            }

            if (String.IsNullOrEmpty(inputPoC.Text)) {
                return;
            }

            if (MessageBox.Show("Delete "+ inputPoC.SelectedItem.ToString() + "\nConfirm?", "Delete Screenshot", MessageBoxButtons.YesNo) == DialogResult.Yes) {
                //check if path existed and remove
                DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
                if (entry.isScreenshotExist(inputPoC.Text)) {
                    entry.removeScreenshot(inputPoC.Text);
                    pictureBoxPoC.Image = null;
                    inputPoC.Items.Remove(inputPoC.Text);
                    inputPoC.Text = "";
                    inputCaption.Text = "";
                }
                else {
                    MessageBox.Show(@"Screenshot does not exist in the Finding");
                    return;
                }

            }
            else {
                return;
            }
        }


        private void buttonPoCPaint_Click(object sender, EventArgs e) {
            if (String.IsNullOrEmpty(inputPoC.Text)) return;
            DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
            Image image = entry.getScreenshots()[inputPoC.Text].getImage();
            string tempImagePath = Config.ProjectPath + "\\" + "tmp.png";
            image.Save(tempImagePath, System.Drawing.Imaging.ImageFormat.Jpeg);
            System.Diagnostics.Process execute = new System.Diagnostics.Process();
            ProcessStartInfo startInfo = new ProcessStartInfo("mspaint", tempImagePath);
            execute.StartInfo = startInfo;
            execute.EnableRaisingEvents = true;
            execute.Exited += (exitSender, exitEvent) =>
            {

                if (this.pictureBoxPoC.InvokeRequired) {
                    pictureBoxPoC.Invoke(new MethodInvoker(delegate() {
                        Image photo = new Bitmap(tempImagePath);
                        entry.getScreenshots()[inputPoC.Text].setImage(photo);
                        pictureBoxPoC.Image = photo;
                        pictureBoxPoC.Update();
                        //File.Delete(tempImagePath);
                    }));
                }
            };

            execute.Start();
        }

        private void inputPoC_SelectedIndexChanged(object sender, EventArgs e) {
            DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
            Dictionary<string, Screenshot> screenshot = entry.getScreenshots();
            string imageName = inputPoC.Text;
            inputCaption.Text = screenshot[imageName].getCaption();
            pictureBoxPoC.Image = screenshot[imageName].getImage();
        }

        /// <summary>
        /// If inputPoC dropdown list not emypt => Screenshot exist
        /// auto save catption when text changed
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void inputCaption_TextChanged(object sender, EventArgs e) {
            if (!Program.findingTree.isFindingSelected()) {
                return;
            }

            if (!String.IsNullOrEmpty(inputPoC.Text)) {
                DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(),Program.findingTree.getSelectedFindingName());
                Dictionary<string, Screenshot> screenshot = entry.getScreenshots();
                string imageName = inputPoC.Text;
                screenshot[imageName].setCaption(inputCaption.Text);
            }
        }

        private void inputAffected_TextChanged(object sender, EventArgs e) {
            if (!Program.findingTree.isFindingSelected()) {
                return;
            }
                DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
                entry.setAffected(inputAffected.Text);
        }

        private void inputDetails_TextChanged(object sender, EventArgs e) {
            if (!Program.findingTree.isFindingSelected()) {
                return;
            }
            DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
            entry.setDetails(inputDetails.Text);

        }

        private void inputRecommendation_TextChanged(object sender, EventArgs e) {
            if (!Program.findingTree.isFindingSelected()) {
                return;
            }
            DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
            entry.setRecommendation(inputRecommendation.Text);
        }

        private void buttonPoCExport_Click(object sender, EventArgs e) {
            if (String.IsNullOrEmpty(inputPoC.Text)) return;
            DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
            if(entry.getScreenshots().Keys.Contains(inputPoC.Text)){
                entry.getScreenshots()[inputPoC.Text].getImage().Save(Config.ProjectPath + "\\" + inputPoC.Text + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmss") + ".png");
                MessageBox.Show("Image Exported to \n" + Config.ProjectPath + "\\" + inputPoC.Text + "_" + DateTime.Now.ToString("yyyyMMdd_HHmmss") + ".png");
            }
        }

        private void buttonPoCInsert_Click(object sender, EventArgs e) {
            if (String.IsNullOrEmpty(inputPoC.Text)) return;
            DataEntry entry = Program.projectFinding.getEntry(Program.findingTree.getSelectedRootNodeName(), Program.findingTree.getSelectedFindingName());
            if (entry.getScreenshots().Keys.Contains(inputPoC.Text)) {
                string newDescription = @"[[IMAGE:" + inputPoC.Text + "]]" + "\n" + entry.getDetails();
                entry.setDetails(newDescription);
                inputDetails.Text = newDescription;
            }
        }






    }
}