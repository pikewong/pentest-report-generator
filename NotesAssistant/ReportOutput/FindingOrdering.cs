using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using NotesAssistant.Findings;

namespace NotesAssistant.ReportOutput {
    public partial class FindingOrdering : Form {

        List<Tuple<string, List<DataEntry>>> HighRiskList = null;
        List<Tuple<string, List<DataEntry>>> MediumRiskList = null;
        List<Tuple<string, List<DataEntry>>> LowRiskList = null;
        List<Tuple<string, List<DataEntry>>> InformationalList = null;
        public FindingOrdering() {
            InitializeComponent();

            HighRiskList = Program.projectFinding.getReportList(RiskLevel.High);
            MediumRiskList = Program.projectFinding.getReportList(RiskLevel.Medium);
            LowRiskList = Program.projectFinding.getReportList(RiskLevel.Low);
            InformationalList = Program.projectFinding.getReportList(RiskLevel.Informational);

            Program.projectFinding.buildReportFinding();
            //Program.projectFinding.print();
            displayFinding();
        }

        private void displayFinding() {

            dataGridView.Rows.Clear();
            dataGridView.Refresh();

            foreach (Tuple<string, List<DataEntry>> item in HighRiskList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "High";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);

            }

            foreach (Tuple<string, List<DataEntry>> item in MediumRiskList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "Medium";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);


            }

            foreach (Tuple<string, List<DataEntry>> item in LowRiskList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "Low";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);


            }

            foreach (Tuple<string, List<DataEntry>> item in InformationalList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "Informational";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);


            }
        }

        private void buttonOk_Click(object sender, EventArgs e) {
            this.Hide();
            new docxOutputFormater(Program.projectFinding);
            this.Close();
        }

        private void buttonCancel_Click(object sender, EventArgs e) {
            this.Close();
        }

        private void buttonUp_Click(object sender, EventArgs e) {
            moveSelected("UP");
        }

        private void buttonDown_Click(object sender, EventArgs e) {
            moveSelected("DOWN");
        }

        private void moveSelected(string ACTION) { 
            int highRiskCount = HighRiskList.Count;
            int mediumRiskCount = MediumRiskList.Count;
            int lowRiskCount = LowRiskList.Count;
            int informationalCount = InformationalList.Count;

            List<Tuple<string, List<DataEntry>>> workingList = null;

            string riskLevel = dataGridView.SelectedRows[0].Cells[0].Value.ToString();
            string findingName = dataGridView.SelectedRows[0].Cells[1].Value.ToString();

            switch (RiskLevelFunction.getLevel(riskLevel)) { 
                case RiskLevel.High:
                    workingList = HighRiskList;
                    break;
                case RiskLevel.Medium:
                    workingList = MediumRiskList;
                    break;
                case RiskLevel.Low:
                    workingList = LowRiskList;
                    break;
                case RiskLevel.Informational:
                    workingList = InformationalList;
                    break;
            }

            int listCount = workingList.Count;
            for (int i = 0; i < listCount; i++) {
                if(findingName.CompareTo(workingList[i].Item1)==0){
                    Tuple<string, List<DataEntry>> workingTuple = workingList[i];
                    switch (ACTION) { 
                        case "UP":
                            if (i > 0) {
                                swapList(workingList, i, i - 1);
                                int selectRow = dataGridView.SelectedRows[0].Index - 1;
                                displayFinding();
                                dataGridView.Rows[selectRow].Selected = true;
                            }
                            break;
                        case "DOWN":
                            if (i < listCount - 1) {
                                swapList(workingList, i, i + 1);
                                int selectRow = dataGridView.SelectedRows[0].Index + 1;

                                displayFinding();
                                dataGridView.Rows[selectRow].Selected = true;
                            }
                            break;
                    }
                    break;
                }
                
            }
                
        }

        private void swapList(List<Tuple<string, List<DataEntry>>> list, int indexA, int indexB) {
            Tuple<string, List<DataEntry>> tmp = list[indexA];
            list[indexA] = list[indexB];
            list[indexB] = tmp;
        }

    }
}
