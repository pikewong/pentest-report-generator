using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using NotesAssistant.Findings;

namespace NotesAssistant.ReportOutput {
    public partial class FindingOrdering : Form {
        public FindingOrdering() {
            InitializeComponent();

            Program.projectFinding.buildReportFinding();
            //Program.projectFinding.print();
            displayFinding();
        }

        private void displayFinding() {
            List<Tuple<string, List<DataEntry>>> HighRiskList = Program.projectFinding.getReportList(RiskLevel.High);
            List<Tuple<string, List<DataEntry>>> MediumRiskList = Program.projectFinding.getReportList(RiskLevel.Medium);
            List<Tuple<string, List<DataEntry>>> LowRiskList = Program.projectFinding.getReportList(RiskLevel.Low);
            List<Tuple<string, List<DataEntry>>> InformationalList = Program.projectFinding.getReportList(RiskLevel.Informational);

            

            foreach (Tuple<string, List<DataEntry>> item in HighRiskList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "High";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);

            }

            foreach (Tuple<string, List<DataEntry>> item in MediumRiskList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "Medium";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);


            }

            foreach (Tuple<string, List<DataEntry>> item in LowRiskList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "Low";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);


            }

            foreach (Tuple<string, List<DataEntry>> item in InformationalList) {
                DataGridViewRow row = (DataGridViewRow)dataGridView.Rows[0].Clone();
                row.Cells[0].Value = "Informational";
                row.Cells[1].Value = item.Item1;
                for (int i = 0; i < item.Item2.Count; i++) {
                    if (i == 0) {
                        row.Cells[2].Value = item.Item2[i].getApplicationName();
                    }
                    else {
                        row.Cells[2].Value = row.Cells[2].Value + ", " + item.Item2[i].getApplicationName();
                    }
                }
                dataGridView.Rows.Add(row);


            }
        }

        private void buttonOk_Click(object sender, EventArgs e) {
            this.Hide();
            new docxOutputFormater(Program.projectFinding);
            this.Close();
        }

        private void buttonCancel_Click(object sender, EventArgs e) {
            this.Close();
        }
    }
}
