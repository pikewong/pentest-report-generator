using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using NotesAssistant.Findings;
using Excel = Microsoft.Office.Interop.Excel;

namespace NotesAssistant.ReportOutput {

    enum FindingListItemOrder { 
        ITEMNUM = 1,
        FINDINGNAME = 2,
        AFFECTED = 3,
        RISKLEVEL = 4,
        DESCRIPTION = 5,
        RECOMMENDATION = 6,
        POC = 7
    }

    class XlsxOutputFormater {
        string outputPath = null;
        Excel.Application excelApp = null;
        Excel.Workbook Wb = null;
        Excel.Worksheet Ws = null;
        int numOfItems = 2;

        /*
         * Constructor
         * Initialize Worksheet
         * 
         * */
        public XlsxOutputFormater() {
            excelApp = new Excel.Application();
            excelApp.Visible = true;
            Wb = excelApp.Workbooks.Add();
            Ws = (Excel.Worksheet)excelApp.Worksheets[1];
            initExcelFormat(Ws);
        }

        /*
         * Set Title
         * Set Column Width
         * Set Title Color
         * Set Wrap Test
         * Set Alignment
         * 
         * */
        private void initExcelFormat(Excel.Worksheet Ws) {
            Ws.Cells[1, FindingListItemOrder.ITEMNUM] = @"#";
            ((Excel.Range)Ws.Columns[FindingListItemOrder.ITEMNUM]).ColumnWidth = 3;

            Ws.Cells[1, FindingListItemOrder.FINDINGNAME] = @"Finding Name";
            ((Excel.Range)Ws.Columns[FindingListItemOrder.FINDINGNAME]).ColumnWidth = 25;

            Ws.Cells[1, FindingListItemOrder.AFFECTED] = @"Affected";
            ((Excel.Range)Ws.Columns[FindingListItemOrder.AFFECTED]).ColumnWidth = 40;

            Ws.Cells[1, FindingListItemOrder.RISKLEVEL] = @"Risk Level";
            ((Excel.Range)Ws.Columns[FindingListItemOrder.RISKLEVEL]).ColumnWidth = 18;

            Ws.Cells[1, FindingListItemOrder.DESCRIPTION] = @"Description";
            ((Excel.Range)Ws.Columns[FindingListItemOrder.DESCRIPTION]).ColumnWidth = 50;

            Ws.Cells[1, FindingListItemOrder.RECOMMENDATION] = @"Recommendation";
            ((Excel.Range)Ws.Columns[FindingListItemOrder.RECOMMENDATION]).ColumnWidth = 50;

            Ws.Cells[1, FindingListItemOrder.POC] = @"PoC";
            ((Excel.Range)Ws.Columns[FindingListItemOrder.POC]).ColumnWidth = 30;

            ((Excel.Range)Ws.Columns["A:G"]).WrapText = true;
            ((Excel.Range)Ws.Columns["A:G"]).HorizontalAlignment = Excel.XlHAlign.xlHAlignLeft;
            ((Excel.Range)Ws.Columns["A:G"]).VerticalAlignment = Excel.XlVAlign.xlVAlignTop;
         
            Ws.Range["A1", "G1"].Interior.Color = System.Drawing.ColorTranslator.ToOle(System.Drawing.Color.CornflowerBlue);
        }



        // Add Item
        private void addItem(DataEntry entry, int position) {
            Ws.Cells[position, FindingListItemOrder.ITEMNUM] = position - 1;
            Ws.Cells[position, FindingListItemOrder.FINDINGNAME] = entry.getFindingName();
            Ws.Cells[position, FindingListItemOrder.AFFECTED] = entry.getAffected();
            Ws.Cells[position, FindingListItemOrder.RISKLEVEL] = entry.getRiskLevel().ToString();
            Ws.Cells[position, FindingListItemOrder.DESCRIPTION] = entry.getDetails();
            Ws.Cells[position, FindingListItemOrder.RECOMMENDATION] = entry.getRecommendation();
            Ws.Cells[position, FindingListItemOrder.POC] = entry.getScreenshots();
        }

        public void insertFindings(PentestFindings pentestFindings) {
            List<DataEntry> highRiskList = pentestFindings.getHighRisk();
            List<DataEntry> mediumRiskList = pentestFindings.getMediumRisk();
            List<DataEntry> LowRiskList = pentestFindings.getLowRisk();
            List<DataEntry> AOIList = pentestFindings.getInformational();


            foreach (DataEntry entry in highRiskList) {
                addItem(entry, numOfItems++);
            }
            foreach (DataEntry entry in mediumRiskList) {
                addItem(entry, numOfItems++);
            }
            foreach (DataEntry entry in LowRiskList) {
                addItem(entry, numOfItems++);
            }
            foreach (DataEntry entry in AOIList) {
                addItem(entry, numOfItems++);
            }
        }
        
    }
}
