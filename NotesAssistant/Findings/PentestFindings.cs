using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NotesAssistant.Findings {
    class PentestFindings {

        private List<DataEntry> highRisk = new List<DataEntry>();
        private List<DataEntry> mediumRisk = new List<DataEntry>();
        private List<DataEntry> lowRisk = new List<DataEntry>();
        private List<DataEntry> informational = new List<DataEntry>();
        private List<DataEntry> unclassified = new List<DataEntry>();

        public void addEntry(DataEntry entry) {
            if (entry.getRiskLevel().CompareTo(RiskLevel.HIGH) == 0) {
                highRisk.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.MEDIUM) == 0) {
                mediumRisk.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.LOW) == 0) {
                lowRisk.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.INFORMATIONAL) == 0) {
                informational.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.UNCLASSIFIED) == 0) {
                unclassified.Add(entry);
            }
        }

        public void removeEntry(DataEntry entry) {
            if (entry.getRiskLevel().CompareTo(RiskLevel.HIGH) == 0) {
                highRisk.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.MEDIUM) == 0) {
                mediumRisk.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.LOW) == 0) {
                lowRisk.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.INFORMATIONAL) == 0) {
                informational.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.UNCLASSIFIED) == 0) {
                unclassified.Remove(entry);
            }
        }

        public bool isRecordExist(string findingName){

            foreach (DataEntry duplicateEntry in highRisk) {
                if (duplicateEntry.getFindingName().CompareTo(findingName) == 0) {
                    return true;
                }
            }
            foreach (DataEntry duplicateEntry in mediumRisk) {
                if (duplicateEntry.getFindingName().CompareTo(findingName) == 0) {
                    return true;
                }
            }
            foreach (DataEntry duplicateEntry in lowRisk) {
                if (duplicateEntry.getFindingName().CompareTo(findingName) == 0) {
                    return true;
                }
            }
            foreach (DataEntry duplicateEntry in informational) {
                if (duplicateEntry.getFindingName().CompareTo(findingName) == 0) {
                    return true;
                }
            }
            foreach (DataEntry duplicateEntry in unclassified) {
                if (duplicateEntry.getFindingName().CompareTo(findingName) == 0) {
                    return true;
                }
            }
            return false;
        }

        public List<DataEntry> getHighRisk() { return this.highRisk; }
        public List<DataEntry> getMediumRisk() { return this.mediumRisk; }
        public List<DataEntry> getLowRisk() { return this.lowRisk; }
        public List<DataEntry> getInformational() { return this.informational; }
        public List<DataEntry> getUnclassified() { return this.unclassified; }
        
        
        public List<DataEntry> getAllEntries() {
            List<DataEntry> tempDataEntry = new List<DataEntry>();
            foreach (DataEntry entry in highRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in mediumRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in lowRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in informational) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in unclassified) {
                tempDataEntry.Add(entry);
            }

            return tempDataEntry;
        }

        public DataEntry getEntryByFindingName(string findingName) {
            DataEntry returnEntry = null;
            List<DataEntry> entryList = getAllEntries();
            foreach (DataEntry entry in entryList) {
                if (entry.getFindingName().CompareTo(findingName) == 0) {
                    returnEntry = entry;
                    break;
                }
            }
            return returnEntry;
        }

    }
}
