using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NotesAssistant.Findings {
    class ProjectFindings {
        Dictionary<string, ApplicationFindings> applicationFindingList = new Dictionary<string, ApplicationFindings>();

        List<Tuple<string, List<DataEntry>>> HighRiskList = new List<Tuple<string,List<DataEntry>>>();
        List<Tuple<string, List<DataEntry>>> MediumRiskList = new List<Tuple<string,List<DataEntry>>>();
        List<Tuple<string, List<DataEntry>>> LowRiskList = new List<Tuple<string,List<DataEntry>>>();
        List<Tuple<string, List<DataEntry>>> InformationalList = new List<Tuple<string, List<DataEntry>>>();

        public List<Tuple<string, List<DataEntry>>> getReportList(RiskLevel riskLevel) {
            switch (riskLevel) {
                case RiskLevel.High:
                    return HighRiskList;
                case RiskLevel.Medium:
                    return MediumRiskList;
                case RiskLevel.Low:
                    return LowRiskList;
                case RiskLevel.Informational:
                    return InformationalList;
            }
            return null;
        }

        public Dictionary<string, ApplicationFindings> getApplicationFindingList() { return applicationFindingList; }
        
        public ApplicationFindings getApplication(string applicationName){return applicationFindingList[applicationName];}

        public void addApplication(string applicationName) {
            applicationFindingList.Add(applicationName, new ApplicationFindings());

        }
        public void removeApplication(string applicationname) {
            applicationFindingList.Remove(applicationname);
        }
        
        public void addEntry(string applicationName, DataEntry entry) {
            ApplicationFindings application = applicationFindingList[applicationName];
            application.addEntry(entry);
        }

        public void removeEntry(string applicationName, DataEntry entry) {
            ApplicationFindings application = applicationFindingList[applicationName];
            application.removeEntry(entry);
        }

        public void removeEntry(string applicationName, string findingName) {
            ApplicationFindings application = applicationFindingList[applicationName];
            application.removeEntry(application.getEntry(findingName));
        }


        public DataEntry getEntry(string applicationName, string findingName) {
            ApplicationFindings application = applicationFindingList[applicationName];
            DataEntry entry = application.getEntry(findingName);
            return entry;
        }

        public bool isApplicationExist(string applicationName){
            return applicationFindingList.Keys.Contains(applicationName);
        }

        public void buildReportFinding() {
            HighRiskList.Clear();
            MediumRiskList.Clear();
            LowRiskList.Clear();
            InformationalList.Clear();

            foreach (string applicationName in applicationFindingList.Keys) {
                ApplicationFindings applicationFindings = applicationFindingList[applicationName];

                List<DataEntry> entriesList = applicationFindings.getReportEntries();
                foreach (DataEntry entry in entriesList) {
                    bool finished = false;
                    string findingName = entry.getFindingName();
                    RiskLevel riskLevel = entry.getRiskLevel();

                    // Loop high Risk
                    foreach (Tuple<string, List<DataEntry>> item in HighRiskList) {
                        if (item.Item1.ToString().CompareTo(findingName) == 0) {
                            item.Item2.Add(entry);
                            finished = true;
                        }
                    }
                    if (finished) continue;

                    // Loop Medium Risk
                    foreach (Tuple<string, List<DataEntry>> item in MediumRiskList) {
                        if (item.Item1.ToString().CompareTo(findingName) == 0) {
                            if (riskLevel <= RiskLevel.Medium) {
                                item.Item2.Add(entry);
                                finished = true;
                            }
                            else {
                                item.Item2.Add(entry);
                                MediumRiskList.Remove(item);
                                adjustEntryRiskLevel(item, riskLevel);
                                finished = true;
                            }
                        }
                    }
                    if (finished) continue;

                    // Loop Low Risk
                    foreach (Tuple<string, List<DataEntry>> item in LowRiskList) {
                        if (item.Item1.ToString().CompareTo(findingName) == 0) {
                            if (riskLevel <= RiskLevel.Low) {
                                item.Item2.Add(entry);
                                finished = true;
                            }
                            else {
                                item.Item2.Add(entry);
                                MediumRiskList.Remove(item);
                                adjustEntryRiskLevel(item, riskLevel);
                                finished = true;
                            }
                        }
                    }
                    if (finished) continue;

                    // Loop AOI
                    foreach (Tuple<string, List<DataEntry>> item in InformationalList) {
                        if (item.Item1.ToString().CompareTo(findingName) == 0) {
                            if (riskLevel <= RiskLevel.Informational) {
                                item.Item2.Add(entry);
                                finished = true;
                            }
                            else {
                                item.Item2.Add(entry);
                                MediumRiskList.Remove(item);
                                adjustEntryRiskLevel(item, riskLevel);
                                finished = true;
                            }
                        }
                    }
                    if (finished) continue;

                    // Item not exist in List
                    addEntryToReportList(findingName, riskLevel, entry);
                }

            }
        }

        private void adjustEntryRiskLevel(Tuple<string, List<DataEntry>> item, RiskLevel riskLevel) {
            switch (riskLevel) {
                case RiskLevel.High:
                    HighRiskList.Add(item);
                    break;
                case RiskLevel.Medium:
                    MediumRiskList.Add(item);
                    break;
                case RiskLevel.Low:
                    LowRiskList.Add(item);
                    break;
                case RiskLevel.Informational:
                    InformationalList.Add(item);
                    break;
            }
        }

        private void addEntryToReportList(string findingName, RiskLevel riskLevel, DataEntry entry) {
            List<DataEntry> entryList = new List<DataEntry>();
            entryList.Add(entry);


            switch(riskLevel){
                case RiskLevel.High:
                    HighRiskList.Add(Tuple.Create(findingName, entryList));
                    break;
                case RiskLevel.Medium:
                    MediumRiskList.Add(Tuple.Create(findingName, entryList));
                    break;
                case RiskLevel.Low:
                    LowRiskList.Add(Tuple.Create(findingName, entryList));
                    break;
                case RiskLevel.Informational:
                    InformationalList.Add(Tuple.Create(findingName, entryList));
                    break;
            }
        }

        public void print() {
            // Loop High Risk
            foreach (Tuple<string, List<DataEntry>> item in HighRiskList) {
                Console.WriteLine("\n"+item.Item1);
                foreach (DataEntry entry in item.Item2) {
                    Console.Write(entry.getApplicationName() + "\t,");
                }
            }


            // Loop Medium Risk
            foreach (Tuple<string, List<DataEntry>> item in MediumRiskList) {
                Console.WriteLine("\n" + item.Item1);
                foreach (DataEntry entry in item.Item2) {
                    Console.Write(entry.getApplicationName() + "\t,");
                }
            }


            // Loop Low Risk
            foreach (Tuple<string, List<DataEntry>> item in LowRiskList) {
                Console.WriteLine("\n" + item.Item1);
                foreach (DataEntry entry in item.Item2) {
                    Console.Write(entry.getApplicationName() + "\t,");
                }
            }


            // Loop AOI
            foreach (Tuple<string, List<DataEntry>> item in InformationalList) {
                Console.WriteLine("\n" + item.Item1);
                foreach (DataEntry entry in item.Item2) {
                    Console.Write(entry.getApplicationName() + "\t,");
                }
            }
        }

    }
}
