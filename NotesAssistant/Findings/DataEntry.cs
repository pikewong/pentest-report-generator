using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace NotesAssistant.Findings {

    class Screenshot {
        string caption = null;
        Image photo = null;

        public Screenshot(Image photo, string caption){
            this.caption = caption;
            this.photo = photo;
        }
        public void setCaption(string caption) { this.caption = caption; }
        public string getCaption() { return this.caption; }
        public Image getImage() { return photo;}
        public void setImage(Image photo) { this.photo = photo; }
    }


    class DataEntry {

        protected static int count = 1;

        protected int fid = 0;
        protected string applicationName = null;
        protected string findingName = null;
        protected string generalName = null;
        protected RiskLevel riskLevel = RiskLevel.Unclassified;
        protected OWASP owasp = OWASP.UNCLASSIFIED;
        protected string affected = null;
        protected string details = null;
        protected string recommendation = null;
        protected string notes = null;
        protected Dictionary<string, Screenshot> screenshots = new Dictionary<string, Screenshot>();

        public DataEntry() {
            this.fid = count++;
        }

        public void deepCopy(DataEntry entry) {
            this.fid = entry.getFid();
            this.applicationName = entry.getApplicationName();
            this.findingName = entry.getFindingName();
            this.generalName = entry.getGeneralName();
            this.riskLevel = entry.getRiskLevel();
            this.owasp = OWASPFunction.getOWASP(entry.getOWASPString());
            this.affected = entry.getAffected();
            this.details = entry.getDetails();
            this.generalName = entry.getRecommendation();
            this.notes = entry.getNotes();
            this.screenshots = entry.getScreenshots();
        }

        public int getFid() { return this.fid; }
        public void setFid(int fid) { this.fid = fid; }

        public string getApplicationName() {
            if (String.IsNullOrEmpty(applicationName)) {
                return "";
            }
            return applicationName;
        }
        public void setApplicationName(string applicationName) { this.applicationName = applicationName; }

        public string getFindingName() {
            if (String.IsNullOrEmpty(findingName)) {
                return "";
            }
            return findingName;
        }
        public void setFindingName(string findingName) { this.findingName = findingName; }

        public string getGeneralName() {
            if (String.IsNullOrEmpty(generalName)) {
                return "";
            }
            return generalName;
        }
        public void setGeneralName(string generalName) {
            if (String.IsNullOrEmpty(generalName))
                generalName = @"N/A";
            this.generalName = generalName; 
        }
        
        public RiskLevel getRiskLevel() {
            return riskLevel;
        }
        public void setRiskLevel(RiskLevel riskLevel) { this.riskLevel = riskLevel; }

        public string getOWASPString() {
            return OWASPFunction.getOWASPString(owasp);
        }
        public void setOWASP(OWASP owasp) { this.owasp = owasp; }
       
        public string getAffected() {
            if (String.IsNullOrEmpty(affected)) {
                return "";
            }
            return affected;
        }
        public void setAffected(string affected) { this.affected = affected; }
        
        public string getDetails() {
            if (String.IsNullOrEmpty(details)) {
                return "";
            }
            return details;
        }
        public void setDetails(string details) { this.details = details; }
        
        public string getRecommendation() {
            if (String.IsNullOrEmpty(recommendation)) {
                return "";
            }
            return recommendation;
        }
        public void setRecommendation(string recommendation) { this.recommendation = recommendation; }
        
        public string getNotes() {
            if (String.IsNullOrEmpty(notes)) {
                return "";
            }
            return notes;
        }
        public void setNotes(string notes) { this.notes = notes; }

        public Dictionary<string, Screenshot> getScreenshots() {
            return screenshots;
        }
        public void addScreenshot(string name, Screenshot caption) {
            if (isScreenshotExist(name)) {
                MessageBox.Show("Screenshot name already exist:\n" + name);
                return;
            }
                screenshots.Add(name, caption); 
        }

        public void removeScreenshot(string name) {
            if (!isScreenshotExist(name)) {
                MessageBox.Show("Screenshot name does not exist:\n" + name);
                return;
            }

            screenshots.Remove(name);
        }

        public bool isScreenshotExist(string name) {
            if (screenshots.Keys.Contains(name)) {
                return true;
            }
            else {
                return false;
            }
        }
    }
}
