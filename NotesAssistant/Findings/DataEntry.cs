using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NotesAssistant.Findings {



    class DataEntry {    
    
        //protected string projectName = null;
        protected string applicationName = null;
        protected string findingName = null;
        protected string generalName = null;
        protected RiskLevel riskLevel = RiskLevel.UNCLASSIFIED;
        protected OWASP owasp = OWASP.UNCLASSIFIED;
        protected string affected = null;
        protected string details = null;
        protected string recommendation = null;
        //protected RectificatoinStatus rectificationStatus = RectificatoinStatus.NULL;
        //protected string rectificationObservation = null;
        protected string notes = null;
        protected string screenshots = null;
		protected bool updated = false;

        public void deepCopy(DataEntry entry) {
            //this.projectName = entry.getProjectName();
            this.applicationName = entry.getApplicationName();
            this.findingName = entry.getFindingName();
            this.generalName = entry.getGeneralName();
            this.riskLevel = entry.getRiskLevel();
            this.owasp = OWASPFunction.getOWASP(entry.getOWASPString());
            this.affected = entry.getAffected();
            this.details = entry.getDetails();
            this.generalName = entry.getRecommendation();
            this.notes = entry.getNotes();
            this.screenshots = entry.getScreenshots();
            this.updated = entry.isupdated();
        }
       /*         
        public string getProjectName() {
            if (String.IsNullOrEmpty(projectName)) {
                return "";
            }
            return projectName;
        }
        public void setProjectName(string projectName) { this.projectName = projectName; }
        */
        public string getApplicationName() {
            // TODO Need to Set Application Name
            if (String.IsNullOrEmpty(applicationName)) {
                return "TESTING";
            }
            return applicationName;
        }
        public void setApplicationName(string applicationName) { this.applicationName = applicationName; }

        public string getFindingName() {
            if (String.IsNullOrEmpty(findingName)) {
                return "";
            }
            return findingName;
        }
        public void setFindingName(string findingName) { this.findingName = findingName; }

        public string getGeneralName() {
            if (String.IsNullOrEmpty(generalName)) {
                return "";
            }
            return generalName;
        }

        public void setGeneralName(string generalName) {
            if (String.IsNullOrEmpty(generalName))
                generalName = @"N/A";
            this.generalName = generalName; 
        }
        
        public RiskLevel getRiskLevel() {
            return riskLevel;
        }
        public void setRiskLevel(RiskLevel riskLevel) { this.riskLevel = riskLevel; }

        public string getOWASPString() {
            return OWASPFunction.getOWASPString(owasp);
        }
        public void setOWASP(OWASP owasp) { this.owasp = owasp; }
       
        public string getAffected() {
            if (String.IsNullOrEmpty(affected)) {
                return "";
            }
            return affected;
        }
        public void setAffected(string affected) { this.affected = affected; }
        
        public string getDetails() {
            if (String.IsNullOrEmpty(details)) {
                return "";
            }
            return details;
        }
        public void setDetails(string details) { this.details = details; }
        
        public string getRecommendation() {
            if (String.IsNullOrEmpty(recommendation)) {
                return "";
            }
            return recommendation;
        }
        public void setRecommendation(string recommendation) { this.recommendation = recommendation; }
        
        /*public RectificatoinStatus getRectificationStatus() {
            return rectificationStatus;
        }
        public void setRectificationStauts(RectificatoinStatus rectificationStatus) { this.rectificationStatus = rectificationStatus; }
       
        public string getRectificationObservation() {
            if (String.IsNullOrEmpty(rectificationObservation)) {
                return "";
            }
            return rectificationObservation;
        }
        public void setRectificationObservation(string rectificationObservation) { this.rectificationObservation = rectificationObservation; }
        */
        
        public string getNotes() {
            if (String.IsNullOrEmpty(notes)) {
                return "";
            }
            return notes;
        }
        public void setNotes(string notes) { this.notes = notes; }

        public string getScreenshots() {
            if (String.IsNullOrEmpty(screenshots)) {
                return "";
            }
            return screenshots;
        }
        public void setScreenshots(string screenshots) { this.screenshots = screenshots; }
		
		public void toggleUpdate(){
			if(updated == false)	
				updated = true;
			else
				updated = false;
		}
		public bool isupdated(){return updated;}
    }
}
