using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace NotesAssistant.Findings {
    class ApplicationFindings {

        private List<DataEntry> highRisk = new List<DataEntry>();
        private List<DataEntry> mediumRisk = new List<DataEntry>();
        private List<DataEntry> lowRisk = new List<DataEntry>();
        private List<DataEntry> informational = new List<DataEntry>();
        private List<DataEntry> unclassified = new List<DataEntry>();

        public void addEntry(DataEntry entry) {
            if (entry.getRiskLevel().CompareTo(RiskLevel.High) == 0) {
                highRisk.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Medium) == 0) {
                mediumRisk.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Low) == 0) {
                lowRisk.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Informational) == 0) {
                informational.Add(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Unclassified) == 0) {
                unclassified.Add(entry);
            }
        }

        public void removeEntry(DataEntry entry) {
            if (entry.getRiskLevel().CompareTo(RiskLevel.High) == 0) {
                highRisk.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Medium) == 0) {
                mediumRisk.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Low) == 0) {
                lowRisk.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Informational) == 0) {
                informational.Remove(entry);
            }
            else if (entry.getRiskLevel().CompareTo(RiskLevel.Unclassified) == 0) {
                unclassified.Remove(entry);
            }
        }

        public List<DataEntry> getHighRisk() { return this.highRisk; }
        public List<DataEntry> getMediumRisk() { return this.mediumRisk; }
        public List<DataEntry> getLowRisk() { return this.lowRisk; }
        public List<DataEntry> getInformational() { return this.informational; }
        public List<DataEntry> getUnclassified() { return this.unclassified; }

        /// <summary>
        /// Return Entry by finind name
        /// </summary>
        /// <param name="findingName"></param>
        /// <returns></returns>
        public DataEntry getEntry(string findingName) {
            DataEntry returnEntry = null;
            List<DataEntry> entryList = getAllEntries();
            foreach (DataEntry entry in entryList) {
                if (entry.getFindingName().CompareTo(findingName) == 0) {
                    returnEntry = entry;
                    break;
                }
            }
            return returnEntry;
        }
        
        /// <summary>
        /// Return all entries include Unclassified
        /// </summary>
        /// <returns></returns>
        public List<DataEntry> getAllEntries() {
            List<DataEntry> tempDataEntry = new List<DataEntry>();
            foreach (DataEntry entry in highRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in mediumRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in lowRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in informational) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in unclassified) {
                tempDataEntry.Add(entry);
            }

            return tempDataEntry;
        }

        /// <summary>
        /// Return all entries except Unclassified
        /// </summary>
        /// <returns></returns>
        public List<DataEntry> getReportEntries() {
            List<DataEntry> tempDataEntry = new List<DataEntry>();
            foreach (DataEntry entry in highRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in mediumRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in lowRisk) {
                tempDataEntry.Add(entry);
            }
            foreach (DataEntry entry in informational) {
                tempDataEntry.Add(entry);
            }

            return tempDataEntry;
        }

    }
}
