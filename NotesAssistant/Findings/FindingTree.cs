using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace NotesAssistant.Findings {
    
    class FindingTree {
        TreeView tv = null;

        TreeNode selectedNode = null;
        TreeNode selectedRootNode = null;
        RiskLevel selectedNodeRiskLevel = RiskLevel.UNCLASSIFIED;

        public FindingTree(TreeView treeview) {
            this.tv = treeview;
            tv.ExpandAll();
        }

        public void setSelectedNode(TreeNode node) {
            selectedNode = node;

            selectedRootNode = node;
            while (selectedRootNode.Parent != null) selectedRootNode = selectedRootNode.Parent;
            if (selectedNode == selectedRootNode) return;


            TreeNode tempNode = selectedNode;
            if (tempNode.Parent.Text == @"High Risk") selectedNodeRiskLevel = RiskLevel.HIGH;
            else if (tempNode.Parent.Text == @"Medium Risk") selectedNodeRiskLevel = RiskLevel.MEDIUM;
            else if (tempNode.Parent.Text == @"Low Risk") selectedNodeRiskLevel = RiskLevel.LOW;
            else if (tempNode.Parent.Text == @"Informational") selectedNodeRiskLevel = RiskLevel.INFORMATIONAL;
            else selectedNodeRiskLevel = RiskLevel.UNCLASSIFIED;
        }

        public string getSelectedFindingName() {
            return selectedNode.Text;
        }

        public string getSelectedRootNodeName() {
            return selectedRootNode.Text;
        }

        public RiskLevel getSelecetedFindingRisk() {
            return selectedNodeRiskLevel;
        }


        public TreeNode createTreeNode(string name) {
            TreeNode node = new TreeNode();
            node.Name = name;
            node.Text = name;
            return node;
        }




        public bool isFindingSelected() {
            return (selectedNode != null);
        }

        public void addApplication(string applicationName) {
            TreeNode rootNode = createTreeNode(applicationName);
            TreeNode highRiskNode = createTreeNode(@"High Risk");
            TreeNode mediumRiskNode = createTreeNode(@"Medium Risk");
            TreeNode lowRiskNode = createTreeNode(@"Low Risk");
            TreeNode informationalNode = createTreeNode(@"Informational");
            TreeNode unclassifiedNode = createTreeNode(@"Unclassified");

            tv.Nodes.Add(rootNode);
            tv.Nodes[applicationName].Nodes.Add(highRiskNode);
            tv.Nodes[applicationName].Nodes.Add(mediumRiskNode);
            tv.Nodes[applicationName].Nodes.Add(lowRiskNode);
            tv.Nodes[applicationName].Nodes.Add(informationalNode);
            tv.Nodes[applicationName].Nodes.Add(unclassifiedNode);
            tv.ExpandAll();
        }

        public void removeApplication(string applicationName) {
            tv.Nodes[applicationName].Remove();
        }

        public void insertFinding(string applicationName, string findingName, RiskLevel riskLevel){
            TreeNode applicationNode = tv.Nodes[applicationName];
            TreeNode newNode = new TreeNode();
            newNode.Text = findingName;
            newNode.Name = findingName;
            if (riskLevel == RiskLevel.HIGH) {
                applicationNode.Nodes[@"High Risk"].Nodes.Add(newNode);
            }
            else if (riskLevel == RiskLevel.MEDIUM) {
                applicationNode.Nodes[@"Medium Risk"].Nodes.Add(newNode);
            }
            else if (riskLevel == RiskLevel.LOW) {
                applicationNode.Nodes[@"Low Risk"].Nodes.Add(newNode);
            }
            else if (riskLevel == RiskLevel.INFORMATIONAL) {
                applicationNode.Nodes[@"Informational"].Nodes.Add(newNode);
            }
            else if (riskLevel == RiskLevel.UNCLASSIFIED) {
                applicationNode.Nodes[@"Unclassified"].Nodes.Add(newNode);
            }

            // Set Focus on this node when added
            tv.SelectedNode = newNode;
            applicationNode.ExpandAll();
            setSelectedNode(newNode);
        }

        public void removeFinding(string applicationName, string findingName, RiskLevel riskLevel) {
            TreeNode applicationNode = tv.Nodes[applicationName];
            if (riskLevel == RiskLevel.HIGH) {
                applicationNode.Nodes[@"High Risk"].Nodes[findingName].Remove();
            }
            else if (riskLevel == RiskLevel.MEDIUM) {
                applicationNode.Nodes[@"Medium Risk"].Nodes[findingName].Remove();
            }
            else if (riskLevel == RiskLevel.LOW) {
                applicationNode.Nodes[@"Low Risk"].Nodes[findingName].Remove();
            }
            else if (riskLevel == RiskLevel.INFORMATIONAL) {
                applicationNode.Nodes[@"Informational"].Nodes[findingName].Remove();
            }
            else if (riskLevel == RiskLevel.UNCLASSIFIED) {
                applicationNode.Nodes[@"Unclassified"].Nodes[findingName].Remove();
            }
        }

    }
}
