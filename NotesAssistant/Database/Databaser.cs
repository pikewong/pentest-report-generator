using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Data.SQLite;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using NotesAssistant.Findings;
using System.Drawing;

namespace NotesAssistant.Database {
    class Databaser {
        SQLiteConnection sqlite_conn = null;

        public Databaser(String path) {
            Config.ProjectPath = path;
        }

        /// <summary>
        /// Create Database
        /// 1. Create all tables
        /// 2. Set Config to Database
        /// </summary>
        public void createDatabase() {
            Random rnd = new Random();
            int randomNum = rnd.Next(1000,9999);
            Config.DatabasePath = Config.ProjectPath + @"\" + Config.ProjectName + "_Data_" + DateTime.Now.ToString("yyyyMMdd_HHmmss_") + randomNum + ".db";

            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();
                SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand();
                // Create Project Table
                sqlite_cmd.CommandText = SQLQuery.CREATE_PROJECT_TABLE;
                sqlite_cmd.ExecuteNonQuery();
                // Create Project Reference Table
                sqlite_cmd.CommandText = SQLQuery.CREATE_PROJ_INFO_TABLE;
                sqlite_cmd.ExecuteNonQuery();
                // Fill in Project Config
                sqlite_cmd.CommandText = SQLQuery.INSERT_CONFIG;
                sqlite_cmd.Prepare();
                sqlite_cmd.Parameters.AddWithValue("@ProjectName", Config.ProjectName);
                sqlite_cmd.Parameters.AddWithValue("@ProjectTime", Config.ProjectTime);
                sqlite_cmd.ExecuteNonQuery();
                // Create Screenshot Table
                sqlite_cmd.CommandText = SQLQuery.CREATE_SCREENSHOT_TABLE;
                sqlite_cmd.ExecuteNonQuery();

                sqlite_conn.Close();
            }
        }

        /// <summary>
        /// Load Database
        /// </summary>
        public void loadDatabase() {
            
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();

                /// Read Application Name from Database 
                /// 1. Create Application in Summary, Tree, Data field
                using (SQLiteCommand sqlite_cmd_readProjectName = sqlite_conn.CreateCommand()) {
                    sqlite_cmd_readProjectName.CommandText = "SELECT DISTINCT ApplicationName FROM ProjectFindings;";
                    SQLiteDataReader projectReader = sqlite_cmd_readProjectName.ExecuteReader();
                    while (projectReader.Read()) {
                        Program.formMain.manageApplicationName("ADD", projectReader["ApplicationName"].ToString());
                    }
                }

                /// Read Project Findings
                /// 1. Insert entry into Program.applicationFindingList
                /// 2. Update Tree view
                using (SQLiteCommand sqlite_cmd_readEntries = sqlite_conn.CreateCommand()) {
                    sqlite_cmd_readEntries.CommandText = "SELECT * FROM ProjectFindings;";
                    SQLiteDataReader entriesReader = sqlite_cmd_readEntries.ExecuteReader();
                    while (entriesReader.Read()) {
                        DataEntry entry = new DataEntry();
                        entry.setFid(Convert.ToInt32(entriesReader["fid"].ToString()));
                        entry.setApplicationName(entriesReader["ApplicationName"].ToString());
                        entry.setFindingName(entriesReader["FindingName"].ToString());
                        entry.setGeneralName(entriesReader["GeneralName"].ToString());
                        entry.setOWASP(OWASPFunction.getOWASP(entriesReader["OWASP"].ToString()));
                        entry.setRiskLevel(RiskLevelFunction.getLevel(entriesReader["RiskLevel"].ToString()));
                        entry.setAffected(entriesReader["Affected"].ToString());
                        entry.setDetails(entriesReader["Details"].ToString());
                        entry.setRecommendation(entriesReader["Recommendation"].ToString());
                        entry.setNotes(entriesReader["Notes"].ToString());
                        using (SQLiteCommand sqlite_cmd_readScreenshot = sqlite_conn.CreateCommand()) {
                            sqlite_cmd_readScreenshot.CommandText = "SELECT * FROM Screenshot WHERE fid = " + entriesReader["fid"].ToString() + ";" ;
                            SQLiteDataReader screenshotReader = sqlite_cmd_readScreenshot.ExecuteReader();
                            while (screenshotReader.Read()){ 
                                byte[] imageByte = (System.Byte[])screenshotReader["Image"];
                                Image photo = ByteToImage(imageByte);
                                string caption = screenshotReader["Caption"].ToString();
                                
                                Screenshot screenshot = new Screenshot(photo, caption);
                                
                                string name = screenshotReader["Name"].ToString();
                                entry.addScreenshot(name, screenshot);          
                            }

                        }

                        Program.projectFinding.addEntry(entry.getApplicationName(), entry);
                        Program.findingTree.insertFinding(entry.getApplicationName(), entry.getFindingName(), entry.getRiskLevel());
                    }
                }

                /// Read Screenshot
                /// Output BLOB into a temp folder and set into screenshot
                using (SQLiteCommand sqlite_cmd_readScreenshot = sqlite_conn.CreateCommand()) {
                    sqlite_cmd_readScreenshot.CommandText = "SELECT * FROM Screenshot;";
                    SQLiteDataReader screenshotReader = sqlite_cmd_readScreenshot.ExecuteReader();
                    while (screenshotReader.Read()) {
                        
                    }
                }

                /// Read Project Config
                /// Set Config
                using (SQLiteCommand sqlite_cmd_readConfig = sqlite_conn.CreateCommand()) {
                    sqlite_cmd_readConfig.CommandText = "SELECT * FROM ProjectDetails WHERE id = 1;";
                    SQLiteDataReader configReader = sqlite_cmd_readConfig.ExecuteReader();
                    if (configReader.Read()) {
                        Config.ProjectTime = configReader["ProjectTime"].ToString();
                        Config.ProjectName = configReader["ProjectName"].ToString();
                    }
                }

                // Close connection
                sqlite_conn.Close();
            }
        }

        /*
         * Input: pentestFindings
         * 
         * Save all the entries in pentestFindings into DB
         * 
         * */
        public void saveProject(ProjectFindings projectFindings) {

            Dictionary<string, ApplicationFindings> applicatoinFindingList = projectFindings.getApplicationFindingList();

            // Remove All record first
            try {
                using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                    sqlite_conn.Open();
                    using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                        sqlite_cmd.CommandText = "DELETE FROM ProjectFindings;";
                        sqlite_cmd.ExecuteNonQuery();
                        sqlite_cmd.CommandText = "DELETE FROM Screenshot;";
                        sqlite_cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex) {
                MessageBox.Show("Unknow Error Occurred.... Project Unsaved...Please try again later...");
                MessageBox.Show(ex.ToString());
                return;
            }
            finally {
                sqlite_conn.Close();
            }


            foreach (string appName in applicatoinFindingList.Keys) {
                ApplicationFindings pentestFindings = applicatoinFindingList[appName];
                List<DataEntry> entryList = pentestFindings.getAllEntries();
                foreach (DataEntry entry in entryList) {
                    insertEntry(entry);
                }
            }


        }

        private void insertEntry(DataEntry entry) {
            // Project Findings
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    // Command
                    sqlite_cmd.CommandText = SQLQuery.INSERT_ENTRY;

                    sqlite_cmd.Prepare();
                    sqlite_cmd.Parameters.AddWithValue("@fid", entry.getFid());
                    sqlite_cmd.Parameters.AddWithValue("@ApplicationName", entry.getApplicationName());
                    sqlite_cmd.Parameters.AddWithValue("@FindingName", entry.getFindingName());
                    sqlite_cmd.Parameters.AddWithValue("@GeneralName", entry.getGeneralName());
                    sqlite_cmd.Parameters.AddWithValue("@OWASP", entry.getOWASPString());
                    sqlite_cmd.Parameters.AddWithValue("@RiskLevel", entry.getRiskLevel().ToString());
                    sqlite_cmd.Parameters.AddWithValue("@Affected", entry.getAffected());
                    sqlite_cmd.Parameters.AddWithValue("@Details", entry.getDetails());
                    sqlite_cmd.Parameters.AddWithValue("@Recommendation", entry.getRecommendation());
                    sqlite_cmd.Parameters.AddWithValue("@Notes", entry.getNotes());

                    sqlite_cmd.ExecuteNonQuery();
                }
                sqlite_conn.Close();
            }
            
            // Screenshot TODO
            Dictionary<string, Screenshot> screenshot = entry.getScreenshots();
            foreach (string name in screenshot.Keys) {
                using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                    sqlite_conn.Open();
                    using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {

                        // Command
                        sqlite_cmd.CommandText = SQLQuery.INSERT_SCREENSHOT;

                        sqlite_cmd.Prepare();
                        sqlite_cmd.Parameters.AddWithValue("@fid", entry.getFid());
                        sqlite_cmd.Parameters.AddWithValue("@Name", name);
                        sqlite_cmd.Parameters.AddWithValue("@Caption", screenshot[name].getCaption());
                        byte[] image = ImageToByte(screenshot[name].getImage(), System.Drawing.Imaging.ImageFormat.Jpeg);
                        sqlite_cmd.Parameters.AddWithValue("@Image", image);

                        sqlite_cmd.ExecuteNonQuery();
                    }
                    sqlite_conn.Close();
                }
            }
        }

        private byte[] ImageToByte(Image image, System.Drawing.Imaging.ImageFormat format) {
            using (MemoryStream ms = new MemoryStream()) {
                // Convert Image to byte[]
                image.Save(ms, format);
                byte[] imageBytes = ms.ToArray();
                return imageBytes;
            }
        }

        private Image ByteToImage(byte[] imageBytes) {
            // Convert byte[] to Image
            MemoryStream ms = new MemoryStream(imageBytes, 0, imageBytes.Length);
            ms.Write(imageBytes, 0, imageBytes.Length);
            Image image = new Bitmap(ms);
            return image;
        }

        private int getNumOfFindingRecord() {
            int result = 0;
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();

                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {

                    sqlite_cmd.CommandText = "SELECT COUNT(fid) FROM ProjectFindings;";
                    result = Convert.ToInt32(sqlite_cmd.ExecuteScalar());
                }
                sqlite_conn.Close();
            }
            return result;
        }

        private int getNumOfScreenshot() {
            int result = 0;
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();

                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {

                    sqlite_cmd.CommandText = "SELECT COUNT(sid) FROM Screenshot;";
                    result = Convert.ToInt32(sqlite_cmd.ExecuteScalar());
                }
                sqlite_conn.Close();
            }
            return result;
        }

        private bool isRecordExist(string findingName) {
            bool isExist = false;
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    // Command
                    sqlite_cmd.CommandText = "SELECT COUNT(fid) FROM ProjectFindings WHERE FindingName = @findingName";
                    sqlite_cmd.Prepare();
                    sqlite_cmd.Parameters.AddWithValue("@findingName", findingName);
                    if (Convert.ToInt32(sqlite_cmd.ExecuteScalar()) > 0)
                        isExist = true;
                }
                sqlite_conn.Close();
            }

            return isExist;
        }

        public void LoadReference() {
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();

                // Update Project Name
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    sqlite_cmd.CommandText = "SELECT DISTINCT ProjectName FROM ReferenceTable;";
                    SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                    while (reader.Read()) {
                        Program.formMain.updateReference("ProjectName", reader["ProjectName"].ToString());
                    }
                }

                //Update Finding Name
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    sqlite_cmd.CommandText = "SELECT DISTINCT FindingName FROM ReferenceTable;";
                    SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                    while (reader.Read()) {
                        Program.formMain.updateReference("FindingName", reader["FindingName"].ToString());
                    }
                }
                //Update General Name
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    sqlite_cmd.CommandText = "SELECT DISTINCT GeneralName FROM ReferenceTable;";
                    SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                    while (reader.Read()) {
                        Program.formMain.updateReference("GeneralName", reader["GeneralName"].ToString());
                    }
                }
            }
        }

        public void updateReferenceItem(Dictionary<string, string> referenceInput) {
            
            bool isProjectNull = String.IsNullOrEmpty(referenceInput["ProjectName"]);
            bool isFindingNull = String.IsNullOrEmpty(referenceInput["FindingName"]);
            bool isGeneralNull = String.IsNullOrEmpty(referenceInput["GeneralName"]);
            int stateValue = 0;

            if (!isProjectNull) stateValue += 1;
            if (!isFindingNull) stateValue += 2;
            if (!isGeneralNull) stateValue += 4;

            switch (stateValue) {
                #region 000
                case 0:
                    Program.formMain.clearRefFindingName();
                    Program.formMain.clearRefGeneralName();
                    Program.formMain.clearRefProjectName();
                    LoadReference();
                    break;
                #endregion
                #region P00
                case 1:
                    Program.formMain.clearRefFindingName();
                    Program.formMain.clearRefGeneralName();
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update Finding Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT FindingName FROM ReferenceTable WHERE ProjectName = @ProjectName;";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@ProjectName", referenceInput["ProjectName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("FindingName", reader["FindingName"].ToString());
                            }
                        }
                        
                        // Update General Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT GeneralName FROM ReferenceTable WHERE ProjectName = @ProjectName;";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@ProjectName", referenceInput["ProjectName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("GeneralName", reader["GeneralName"].ToString());
                            }
                        }

                    }
                    break;
                #endregion
                #region 0F0
                case 2:
                    Program.formMain.clearRefProjectName();
                    Program.formMain.clearRefGeneralName();
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update Project Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT ProjectName FROM ReferenceTable WHERE FindingName = @FindingName;";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@FindingName", referenceInput["FindingName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("ProjectName", reader["ProjectName"].ToString());
                            }
                        }
                        
                        // Update General Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT GeneralName FROM ReferenceTable WHERE FindingName = @FindingName;";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@FindingName", referenceInput["FindingName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("GeneralName", reader["GeneralName"].ToString());
                            }
                        }

                    }
                    break;
                #endregion
                #region PF0
                case 3:
                    Program.formMain.clearRefGeneralName();
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update General Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT GeneralName FROM ReferenceTable WHERE ProjectName = @ProjectName and FindingName = @FindingName";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@ProjectName", referenceInput["ProjectName"]);
                            sqlite_cmd.Parameters.AddWithValue("@FindingName", referenceInput["FindingName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("GeneralName", reader["GeneralName"].ToString());
                            }
                        }
                    }
                    break;
                #endregion
                #region 00G
                case 4:
                    Program.formMain.clearRefProjectName();
                    Program.formMain.clearRefFindingName();
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update Project Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT ProjectName FROM ReferenceTable WHERE GeneralName = @GeneralName;";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@GeneralName", referenceInput["GeneralName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("ProjectName", reader["ProjectName"].ToString());
                            }
                        }
                        
                        // Update Finding Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT FindingName FROM ReferenceTable WHERE GeneralName = @GeneralName;";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@GeneralName", referenceInput["GeneralName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("FindingName", reader["FindingName"].ToString());
                            }
                        }

                    }
                    break;
                #endregion
                #region P0G
                case 5:
                    Program.formMain.clearRefFindingName();
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update Finding Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT FindingName FROM ReferenceTable WHERE ProjectName = @ProjectName and GeneralName = @GeneralName";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@ProjectName", referenceInput["ProjectName"]);
                            sqlite_cmd.Parameters.AddWithValue("@GeneralName", referenceInput["GeneralName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("FindingName", reader["FindingName"].ToString());
                            }
                        }
                    }
                    break;
                #endregion
                #region 0FG
                case 6:
                    Program.formMain.clearRefProjectName();
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update Finding Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT DISTINCT ProjectName FROM ReferenceTable WHERE FindingName = @FindingName and GeneralName = @GeneralName";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@FindingName", referenceInput["FindingName"]);
                            sqlite_cmd.Parameters.AddWithValue("@GeneralName", referenceInput["GeneralName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("ProjectName", reader["ProjectName"].ToString());
                            }
                        }
                    }
                    break;
                #endregion
                #region PFG
                case 7:
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update Finding Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = "SELECT * FROM ReferenceTable WHERE ProjectName = @ProjectName and FindingName = @FindingName and GeneralName = @GeneralName";
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@ProjectName", referenceInput["ProjectName"]);
                            sqlite_cmd.Parameters.AddWithValue("@FindingName", referenceInput["FindingName"]);
                            sqlite_cmd.Parameters.AddWithValue("@GeneralName", referenceInput["GeneralName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.displayRef(
                                    reader["ProjectName"].ToString(),
                                    reader["FindingName"].ToString(),
                                    reader["GeneralName"].ToString(),
                                    reader["OWASP"].ToString(),
                                    reader["RiskLevel"].ToString(),
                                    reader["Affected"].ToString(),
                                    reader["Details"].ToString(),
                                    reader["Recommendation"].ToString(),
                                    reader["Notes"].ToString()
                                    );
                            }
                        }
                    }
                    break;
                #endregion

            }
        }
    }
}
