using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.IO;
using System.Data.SQLite;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Threading;
using NotesAssistant.Findings;

namespace NotesAssistant.Database {
    class Databaser {
        SQLiteConnection sqlite_conn = null;

        public Databaser(String path) {
            Config.ProjectPath = path;
        }

        // TODO: May also need to create other Table
        public void createDatabase() {
            Random rnd = new Random();
            int randomNum = rnd.Next(1000,9999);
            Config.DatabasePath = Config.ProjectPath + @"\Data_" + DateTime.Now.ToString("yyyyMMdd_HHmmss_") + randomNum + ".db";

            // Create connection
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {

                // Open
                sqlite_conn.Open();

                // Create command
                SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand();

                sqlite_cmd.CommandText = SQLQuery.CREATE_PROJECT_TABLE;
                sqlite_cmd.ExecuteNonQuery();


                sqlite_cmd.CommandText = SQLQuery.CREATE_PROJ_INFO_TABLE;
                sqlite_cmd.ExecuteNonQuery();
                // Fill in Project Config
                sqlite_cmd.CommandText = SQLQuery.INSERT_CONFIG;
                sqlite_cmd.Prepare();
                sqlite_cmd.Parameters.AddWithValue("@ProjectName", Config.ProjectName);
                sqlite_cmd.Parameters.AddWithValue("@ProjectTime", Config.ProjectTime);
                sqlite_cmd.ExecuteNonQuery();

                // Close connection
                sqlite_conn.Close();
            }
        }

        public void loadDatabase() {
            
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();

                using (SQLiteCommand sqlite_cmd_readProjectName = sqlite_conn.CreateCommand()) {
                    sqlite_cmd_readProjectName.CommandText = "SELECT DISTINCT ApplicationName FROM ProjectFindings;";
                    SQLiteDataReader projectReader = sqlite_cmd_readProjectName.ExecuteReader();
                    while (projectReader.Read()) {
                        // Update Finding Tree, Details App Name, Summary App Name
                        Program.formMain.manageApplicationName("ADD", projectReader["ApplicationName"].ToString());
                    }

                }

                using (SQLiteCommand sqlite_cmd_readEntries = sqlite_conn.CreateCommand()) {
                    sqlite_cmd_readEntries.CommandText = "SELECT * FROM ProjectFindings;";
                    SQLiteDataReader entriesReader = sqlite_cmd_readEntries.ExecuteReader();
                    while (entriesReader.Read()) {
                        DataEntry entry = new DataEntry();
                        entry.setApplicationName(entriesReader["ApplicationName"].ToString());
                        entry.setFindingName(entriesReader["FindingName"].ToString());
                        entry.setGeneralName(entriesReader["GeneralName"].ToString());
                        entry.setOWASP(OWASPFunction.getOWASP(entriesReader["OWASP"].ToString()));
                        entry.setRiskLevel(RiskLevelFunction.getLevel(entriesReader["RiskLevel"].ToString()));
                        entry.setAffected(entriesReader["Affected"].ToString());
                        entry.setDetails(entriesReader["Details"].ToString());
                        entry.setRecommendation(entriesReader["Recommendation"].ToString());
                        entry.setNotes(entriesReader["Notes"].ToString());

                        Program.applicationFindingList[entry.getApplicationName()].addEntry(entry);
                        Program.findingTree.insertFinding(entry.getApplicationName(), entry.getFindingName(), entry.getRiskLevel());
                    }
                }

                using (SQLiteCommand sqlite_cmd_readConfig = sqlite_conn.CreateCommand()) {
                    sqlite_cmd_readConfig.CommandText = "SELECT * FROM ProjectDetails WHERE pid = 1;";
                    SQLiteDataReader configReader = sqlite_cmd_readConfig.ExecuteReader();
                    if (configReader.Read()) {
                        Config.ProjectTime = configReader["ProjectTime"].ToString();
                        Config.ProjectName = configReader["ProjectName"].ToString();
                    }
                }

                // Close connection
                sqlite_conn.Close();
            }
        }

        /*
         * Input: pentestFindings
         * 
         * Save all the entries in pentestFindings into DB
         * 
         * */
        public void saveProject(Dictionary<string, PentestFindings> applicatoinFindingList) {

            // Remove All record first
            try {
                using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                    sqlite_conn.Open();
                    using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                        sqlite_cmd.CommandText = "DELETE FROM ProjectFindings;";
                        sqlite_cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex) {
                MessageBox.Show("Unknow Error Occurred.... Project Unsaved...Please try again later...");
                MessageBox.Show(ex.ToString());
                return;
            }
            finally {
                sqlite_conn.Close();
            }

            foreach (string appName in applicatoinFindingList.Keys) {
                PentestFindings pentestFindings = applicatoinFindingList[appName];
                List<DataEntry> entryList = pentestFindings.getAllEntries();
                foreach (DataEntry entry in entryList) {
                    insertEntry(entry);
                }
            }


        }

        private void insertEntry(DataEntry entry) {
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    int numOfItem = getNumOfFindingRecord() + 1;
                    // Command
                    sqlite_cmd.CommandText = SQLQuery.INSERT_ENTRY;

                    sqlite_cmd.Prepare();
                    sqlite_cmd.Parameters.AddWithValue("@fid", numOfItem);
                    sqlite_cmd.Parameters.AddWithValue("@ApplicationName", entry.getApplicationName());
                    sqlite_cmd.Parameters.AddWithValue("@FindingName", entry.getFindingName());
                    sqlite_cmd.Parameters.AddWithValue("@GeneralName", entry.getGeneralName());
                    sqlite_cmd.Parameters.AddWithValue("@OWASP", entry.getOWASPString());
                    sqlite_cmd.Parameters.AddWithValue("@RiskLevel", entry.getRiskLevel().ToString());
                    sqlite_cmd.Parameters.AddWithValue("@Affected", entry.getAffected());
                    sqlite_cmd.Parameters.AddWithValue("@Details", entry.getDetails());
                    sqlite_cmd.Parameters.AddWithValue("@Recommendation", entry.getRecommendation());
                    sqlite_cmd.Parameters.AddWithValue("@Notes", entry.getNotes());

                    sqlite_cmd.ExecuteNonQuery();
                }
                sqlite_conn.Close();
            }
        }

        private int getNumOfFindingRecord() {
            int result = 0;
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();

                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {

                    sqlite_cmd.CommandText = "SELECT COUNT(fid) FROM ProjectFindings;";
                    result = Convert.ToInt32(sqlite_cmd.ExecuteScalar());
                }
                sqlite_conn.Close();
            }
            return result;
        }

        private bool isRecordExist(string findingName) {
            bool isExist = false;
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.DatabasePath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    // Command
                    sqlite_cmd.CommandText = "SELECT COUNT(fid) FROM ProjectFindings WHERE FindingName = @findingName";
                    sqlite_cmd.Prepare();
                    sqlite_cmd.Parameters.AddWithValue("@findingName", findingName);
                    if (Convert.ToInt32(sqlite_cmd.ExecuteScalar()) > 0)
                        isExist = true;
                }
                sqlite_conn.Close();
            }

            return isExist;
        }

        public void LoadReference() {
            using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                sqlite_conn.Open();

                // Update Project Name
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    sqlite_cmd.CommandText = "SELECT DISTINCT ProjectName FROM ReferenceTable;";
                    SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                    while (reader.Read()) {
                        Program.formMain.updateReference("ProjectName", reader["ProjectName"].ToString());
                    }
                }

                //Update Finding Name
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    sqlite_cmd.CommandText = "SELECT DISTINCT FindingName FROM ReferenceTable;";
                    SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                    while (reader.Read()) {
                        Program.formMain.updateReference("FindingName", reader["FindingName"].ToString());
                    }
                }
                //Update General Name
                using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                    sqlite_cmd.CommandText = "SELECT DISTINCT GeneralName FROM ReferenceTable;";
                    SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                    while (reader.Read()) {
                        Program.formMain.updateReference("GeneralName", reader["GeneralName"].ToString());
                    }
                }
            }
        }

        public void updateReferenceItem(Dictionary<string, string> referenceInput) {
            
            bool isProjectNull = String.IsNullOrEmpty(referenceInput["ProjectName"]);
            bool isFindingNull = String.IsNullOrEmpty(referenceInput["FindingName"]);
            bool isGeneralNull = String.IsNullOrEmpty(referenceInput["GeneralName"]);

            // Searh By Project
            if (!isProjectNull) {
                // No Finding Name No General Name
                if (isFindingNull && isGeneralNull) {
                    Program.formMain.clearRefFindingName();
                    Program.formMain.clearRefGeneralName();
                    string findingName = "SELECT DISTINCT FindingName FROM ReferenceTable WHERE ProjectName = @ProjectName;";
                    string generalName = "SELECT DISTINCT GeneralName FROM ReferenceTable WHERE ProjectName = @ProjectName;";
                    using (sqlite_conn = new SQLiteConnection("Data source=" + Config.RefDBPath + ";Version=3;New=True;Compress=True;")) {
                        sqlite_conn.Open();

                        // Update Finding Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = findingName;
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@ProjectName", referenceInput["ProjectName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("FindingName", reader["FindingName"].ToString());
                            }
                        }
                        
                        // Update General Name
                        using (SQLiteCommand sqlite_cmd = sqlite_conn.CreateCommand()) {
                            sqlite_cmd.CommandText = generalName;
                            sqlite_cmd.Prepare();
                            sqlite_cmd.Parameters.AddWithValue("@ProjectName", referenceInput["ProjectName"]);
                            SQLiteDataReader reader = sqlite_cmd.ExecuteReader();
                            while (reader.Read()) {
                                Program.formMain.updateReference("GeneralName", reader["GeneralName"].ToString());
                            }
                        }

                    }
                }
            }


            string findingNameWithGeneralName = "SELECT DISTINCT FindingName FROM ReferenceTable WHERE ProjectName = @ProjectName and GeneralName = @GeneralName;";
            string generalNameWithFindingName = "SELECT DISTINCT GeneralName FROM ReferenceTable WHERE ProjectName = @Projectname and FindingName = @FindingName;";

            string retrieveRecord = "SELECT * FROM ReferenceTable WHERE ProjectName = @ProjectName and FindingName = @FindingName and generalName = @GeneralName;";



        }
    }
}
